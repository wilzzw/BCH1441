=3 Intro to Bioinformatics and Databases=
==3.12 Software Development for Research Labs==

<div class="time-estimate">
Time estimated: 2.5 h; taken 115 min; date started: 2019-10-27; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:27, 28 October 2019 (EDT)
</div>

;In general, simpler than "real world software development"

 General philosophy: Make implicit knowledge explicit

;Collaboration platforms: make goals, progress, and responsibilities explicit.

;Making plans: where now, what to achieve, how to achieve, with milestones

;Software design: can take as much, if not more time as development.
:* '''Architecture''' centric design process
:* system modelling, [http://steipe.biochemistry.utoronto.ca/abc/index.php/SPN Structured Process Notation]
:* clear design objectives, correct, robust, extensible, and maintainable
:* separation of concerns (modularity, independence)

;Software development:
:* version control is a must.
:* fail-safe vs fail-fast: which is more favourable is probably context-dependent. Is it more important to get the program running and not crash OR be explicit about improper steps [https://www.yegor256.com/2015/08/25/fail-fast.html]
:* good coding style and keep them organized
:* code reviews

;Quality Assurance(QA): sort of like coordinator of the team and auditor

;Deployment and Maintenance (esp. for softwares used by many research labs)

===3.12.1 Test-driven development (TDD)===
;Objectives:
:* Testing the codes is a must. TDD is a development methodology to ensure codes work as intended.
:* Implement TDD as a process of development aside from finding bugs.
:* Clearly identify testable behaviours of the code

;Typical stages of testing:
1) '''Unit tests''': tests performed on the components of structured units that typically do one thing only without side-effects
:* Unit tests test only one function's behaviour, better not have functional dependencies. That goes into integration tests.
:* [http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/ tips of writing unit tests]

2) '''Integration tests''': integrated code units interact through interfaces under '''''contracts'''''. In integration testing, verify the contracts are accurately and completely fulfilled.
:* "ensure the integrity of the interfaces that have been defined between units"

3) '''Validation tests''': test and validate for successful execution

4) '''Performance tests''': test for optimization, stability

;Activity - Working through RPR-Unit_testing.R

R has testthat package that can do unit testing.

<source lang="R">
install.packages("testthat")

library(testthat) #Because there are too many functions associated with it
</source>

;Useful functions:
:* testthat::expect_true() & testthat::expect_false(): throws an error if the argument functional evaluation does not return expected
 <code>> expect_true(is.integer(NA))</code>
 <code>Error: is.integer(NA) isn't true.</code>

Line 74: The following returns FALSE
<code>49*(1/49) == 1 </code>

The reason is that the numbers are represented exactly in R only if the denominator is a power of 2. Otherwise they are rounded. [https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f]

This returns TRUE though: <code>49/49 == 1</code>

There are other "unpredictable behaviours" when comparing whether two numbers are equal. Be safe and use:

:* all.equal(a, b): returns TRUE if a and b are equal for all practical purposes. Circumvent "unpredictable behaviours"
:* testthat::expect_equal(a, b): uses all.equal internally so use it with no worries..
:* testthat::expect_identical(a, b): here's an option to distinguish a and b to the core..
:* testthat::expect_warning(): throws an error if no warning message be thrown when evaluating the argument expression
:* testthat::expect_error(<expr>, <err_msg>): throws an error if  <expr> does not throw the kind of error message in <err_msg> (See Line 113-116)

:* testthat::test_that(<description>, {<test_code_blocks>}): A series of tests included in {<test_code_blocks>} are carried out. Used when it makes sense to collectively test and call the test a name: <description>

<source lang="R">
# Task: Write a function calcGC() that calculates GC content in a sequence.
#       Hint: you could strsplit() the sequence into a vector, and count
#       G's and C's; or you could use gsub("[AT]", "", <sequence>) to remove
#       A's and T's, and use nchar() before and after to calculate the content
#       from the length difference.
#       Then write tests that:
#          confirm that calcGC("AATT") is 0;
#          confirm that calcGC("ATGC") is 0.5;
#          confirm that calcGC("AC")   is 0.5;
#          confirm that calcGC("CGCG") is 1;

calcGC <- function(sequence) {
    splitSeq <- unlist(strsplit(sequence, split=""))
    totalLength <- length(splitSeq)
    sel <- splitSeq == "G" | splitSeq == "C"
    GCcontent <- length(splitSeq[sel])
    GC <- GCcontent / totalLength
    return(GC)
}

library(testthat)

expect_equal(calcGC("AATT"), 0)
expect_true(all.equal(calcGC("ATGC"), 0.5))
expect_equal(calcGC("AC"), 0.5)
expect_equal(calcGC("CGCG"), 1)

</source>

We can save tests in files organized in a test directory. To ensure tests be executed, there are these functions:
:* testthat::test_file(<path_to_test>)
:* testthat::test_dir(<path>): execute all tests in <path> (I wonder whether the function knows which ones are test scripts.. But either way, I wouldn't put non-tests in a given test dir..)

;Tests blocks may be put at the end of the code as supplement that normally does not gets run, but can be optionally activated during tests.


==3.11 Function Databases for Bioinformatics==
;Objective: Familiarize with databases with functional information and related information, as well as annotations.

<div class="time-estimate">
Time estimated: 1.5 h; taken 110 min; date started: 2019-10-29; date completed: 2019-10-29

~~~~
</div>

;EC (Enzyme Commission) numbers:
:* Molecular function in terms of types of reactions.
:* Hierachial classification into 4 levels (e.g. 2.4.1.11 transferase-glycosyl-hexosyl-11: Glycogen Synthase! The actual name would be a recommended name though. Not immediately obvious from that it does transferase-type reaction)
:* Used as the standard annotation in PDB

;Gene Ontology (GO):
:* Categories: Cellular Component, Molecular Function, Biological Process
:* Maintains pertinent controlled vocabularies
:* Entities are connected through relationships such as is_a, has_a etc.
:* Annotate individual genes in terms of generalized functions above
:* General standard annotation for many databases

;Other annotations of gene sets (e.g. pathways, generalized pathways, functional networks)
:* e.g. databases: KEGG (saw this while doing research about yeast Mbp1 on NCBI), MetaCYC
:* STRING database: integrated, cross-referenced tool for discovering through building networks of genome scale functional networks

===3.11.1 Pathway Databases===
;MetaCyc: 
:* Enzymes, reactions, compounds, metabolic pathways, richly curated
:* Evidence is experimentally validated [doi 10.1093/nar/gkx935]
:* Can be used by applications to do high throughput computation/prediction of metabolic networks (e.g. PGDB, available through BioCyc)

;Activity 1 - Navigate MetaCyc

1. Go to https://metacyc.org/

2. On the top right, "change organism database". Select "Saccharomyces cerevisiae S288c"

3. We end up in BioCyc yeastCyc info summary. First a table of Replicons with gene statistics. Then there is a table of information available below.

4. "Metabolism" > "Cellular Overview"

Conclusions:
:* We get a map of pathway systems grouped into some large categories. Zooming in will see symbols (legends available) turn into substrate names. Individual pathways also get names.
:* On the right there are a lot of isolated pathways? All very short. Maybe they are just less well-integrated with the rest major pathways.
:* Notice the brown boundary represents cell boundary. There are transport involved pathways on them.


;Reactome:
:* Focused on mannual annotation of human pathways [doi 10.1093/nar/gkx1132]
:* Uses proper models to construct an extended pathways with signal transduction, transport, DNA replication etc. included.
:* New as of 2018: Enhanced High Level Diagrams, Neo4j graph database structure

;Activity 2- Navigate Reactome

1. Go to https://reactome.org/

2. "Pathway Browser"

3. On the left "Event Hierachy", Expand "Cell Cycle" > Click "Cell Cyle Mitotic". This zooms in.

4. Click the round icon "Open Pathway Diagram" next to the search bar. This will load the diagram of the pathway (basically the cell cycle!)

5. Double click "Mitotic G1-G1/S Phases" will display detailed pathway diagram for it. With just a single click, can view a lot of decriptions beneath.

6. Under "Molecules", we see participating molecules in this pathway. External cross-references proteins (Uniprot), compounds (ChEBI), and DNA/RNA (ENSEMBL). List downloadable.

7. Under "Expression", there are tissue-specific expression levels.


;WikiPathways [doi  10.1093/nar/gkx1064]:
:* Has mostly been on genes and proteins. As of 2018, expanded to metabolism.
:* Sounds more or less similar to the ones already seen
:* The tand-out feature: Open source & collaborative. Available on github.

;Activity 3 - Navigate WikiPathways

1. Go to https://www.wikipathways.org/index.php/WikiPathways

2. Search "Mbp1". One pathway found (Cell Cycle and Cell Division - Saccharomyces cerevisiae).

3. Can click on a protein and link to lots of annotations and external cross-references, as well as other pathways it is involved in.


;KEGG (Kyoto Encyclopedia of Genes and Genomes) [doi 10.1093/nar/gky962]:
:* KEGG pathway maps. Some other implemented modules (e.g. KEGG Ontology) enable mapping to transfer to other cellular organisms.
:* New as of 2018: KEGG NETWORKS (more below).
:* Take into account that the database of health information of KEGG expanding, making treatment of human as a single species in mapping unreasonable.
:* In a nutshell: iseased state as perturbed networks

;Activity 4 - Navigate KEGG Pathways

1. Go to KEGG Pathways https://www.genome.jp/kegg/pathway.html

2. Select Organism prefix "sce". Search keyword "Mbp1"

3. Get one pathway (Cell cycle in yeast) sce04111

4. Clicking on the proteins will get external cross-referenced protein information.


==3.10 General Databases and Services for Bioinformatics==
;Objective: Familiarize with the well-known commonly used databases and services and what they offer.
===3.10.1 European Bioinformatics Institute (EBI)===

<div class="time-estimate">
Time estimated: 1.5 h; taken 3.5 h; date started: 2019-10-28; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 17:14, 28 October 2019 (EDT)
</div>

;EBI: one of the two largest, data for genomics and molecular biology, data integration and services, well-curated

;Notable new resources in 2018 [doi 10.1093/nar/gky1124]:
:* Single cell expression atlas
:* PDBeKB: more cross-references and visualization, annotations

This is helpful for my own records (data resources available from EBI) [doi: 10.1093/nar/gky1124]:

[[File:EBI_data.png|600px]]

;Uniprot: one of the best things offered by EBI. Protein knowledge. Well-curated. Many sequence annotations.

 Many of these resources also offer training programs.

;Activity 1 - Do some EBI search on Mbp1

1. Go to https://www.ebi.ac.uk/

2. Search "mbp1"

3. EBI query help page: https://www.ebi.ac.uk/ebisearch/documentation.ebi
:* Query syntax supports capitalized BOOLEAN OPERATORS, wildcards (*), "exact matches", (grouping), and Apache Lucene regex
:* Query syntax also supports field:keywords searches, as well as cross-referenced prefix:number searches

4. Back to the search results for "mbp1". Under "Protein Sequences", found the entry <code>P39678(MBP1_YEAST) Source: UniProtKB (ID: MBP1_YEAST)</code>
:* There are cross-references and various formats available

5. Click this entry.

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
Explore the Uniprot entry for P39678.
<div class="mw-collapsible-content">
 '''Status: Reviewed (Swiss-Prot).'''
 
 '''Annotation score = 5/5''' (lots of content, but not indication for accuracy!).
 
 '''Experimental evidence for its existence at the protein level.''' This includes protein sequencing, MS, structural characterization, PPI or detection by antibodies

 '''Function: Pay attention to the type of evidence for the functional annotations'''

 GO terms: https://www.uniprot.org/help/gene_ontology

 In my case: 1) Molecular Function: IMP, HDA. 2) Biological Process: IMP, IBA

 '''Names & Taxonomy''': cross-referencing a lot. e.g. NCBI Taxonomic identifier. Protein names, gene names. SGD shows up under "Organism-specific databases".

 '''Subcellular location''': contains GO-cellular component annotations. Has regions of membrane spanning noted if available.

 '''PTM / Processing''': Annotated processing information of the whole peptide sequence with source publications. (PTM database: iPTMnet)

 '''Interaction''': quaternary structure, information relevant to PPI, cross-referencing databases

 '''Structure''': list of structures with quality metrics and other attributes compared. Also cross-refereces and annotations of known structural elements along the sequence.

 '''Family & Domains'''/'''Sequence''': (more annotations and cross-references to other databases)

 '''Similar proteins''': great for finding homologs and variants. Can do similarity analysis through alignment.
</div>
</div>

?How does automatic annotations work?

;Activity 2 - Verify whether the N-terminal start codon is correctly annotated.

;CDS: coding sequence

There seems to be a couple ways I can get the information about DNA sequence location in the genomic context.

Under the "Sequence" on the Uniprot page:
1) [https://www.ncbi.nlm.nih.gov/gene/851503 GeneID 851503] can bring me to NCBI RefSeq database.
:* Primary source: SGD:S000002214
:* Locus tag: YDL056W
:* Here is the sequence: Chromosome: IV, NC_001136.10 (352877..355378)
:* FASTA and GenBank formats are available for download here. In addition, there is a "Sequence Viewer" tool.
:* In the sequence viewer, when you zoom in enough, individual nucleotides will show up.
:* '''In the sequence viewer, you can even download FASTA and GenBank formats of customized ranges. e.g. visible sequence ranges'''

2) Alternatively, access [https://www.ncbi.nlm.nih.gov/nuccore/BK006938.2 GenBank BK006938.2] can bring us to Chromosome IV. Click "Graphics" will bring us to the same "Sequence Viewer" interface.

3) More alternatively, '''''Ensembl Fungi''''' by EBI can also provide such information. Simply go to [http://fungi.ensembl.org/Saccharomyces_cerevisiae/Location/View?db=core;g=YDL056W;r=IV:352877-355378;t=YDL056W_mRNA EnsemblFungi YDL056W].
:* Very similar layout follows. Seems like more formats of downloads are supported under "Export data" on the left. Also has customizable ranges.

;Conclusions:
:* Extensive cross-referencing is very nice: provide extra reassurance for what I am doing.
:* But too many identifiers are painfully too much to mentally contain (so we don't..)
:* The reason I see so many entries with GenBank ID under Uniprot > "Sequence" is probably that GenBank sequences are individually submitted, whereas RefSeq is non-redundant [https://www.ncbi.nlm.nih.gov/books/NBK50679/#RefSeqFAQ.what_is_the_difference_between_1].
:* mRNA sequences from both are in DNA-nucleotide (AGCT) format! Also, they both start at ATG start codon, so ORF. Is that the most pre-maturely transcribed pre-mRNA? I don't know yet...
:* Personally I prefer NCBI version of the functionalities because things look a bit nicer.. But both are good to me so far. Course notes say NCBI cross-references are less open.
:* Actually, NCBI's stuff is a bit annoying with both GenBank and RefSeq.

;Activity 3 - Do some searches with MYSPE Mbp1, annotation transfer

1. Go to https://www.uniprot.org/uploadlists/

2. Convert RefSeqID = NP_010227 to UniProtID

3. '''The UniProtID is G8JQ18''' {I have done this before}

4. Explore Uniprot entry G8JQ18 [https://www.uniprot.org/uniprot/G8JQ18]:

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
Explore Uniprot entry G8JQ18.
<div class="mw-collapsible-content">
 '''Status: Unreviewed (TrEMBL).'''
 
 '''Annotation score = 2/5'''
 
 '''Existence of the protein is predicted.''' "Without evidence at protein, transcript, or homology levels". Only because it has an ORF?

 '''Function''': Automatically annotated by InterPro, EnsemblFungi? All evidence code is IEA.

 '''Names & Taxonomy''': No "Organism-specific databases". Proteome info = UP000006790 Component: Chromosome 2. All automatically annotated in blue.

 '''Subcellular location''': Localized into nucleus (auto. annot.).

 '''PTM / Processing''': N/A

 '''Interaction''': One entry from STRING PPI-database: 45285.XP_003645298.1

 '''Structure''': N/A

 '''Family & Domains'''/'''Sequence''': (auto. annot.) Inferred similar to ''S. cerevisiae'' Mbp1. Looks like the genome is sequenced though.

 '''Similar proteins''': Some low score 50% identity entries.
</div>
</div>

;Conclusion: Mbp1_ERECY is poorly characterized with little information available. At least the genome sequence for this organism seems available.

===3.10.2 National Center for Biotechnology Information (NCBI)===

<div class="time-estimate">
Time estimated: 1.5 h; taken 2 h; date started: 2019-10-28; date completed: 2019-10-28

~~~~
</div>

;NCBI: one of the two largest, data for genomics and molecular biology, data integration and services

;Entrez: NCBI uses this integrated database retrieval system. E-utilities support its programming interface. [doi: 10.1093/nar/gky1069]

;Well-known/Notable services as of 2019: PubMed, PubMedLabs, PMC, PubChem, BLAST...

This is helpful for my own records (Entrez databases available from NCBI) [doi 10.1093/nar/gky1124]:

[[File:NCBI_data.png|600px]]

;Activity 1 - Entrez search Mbp1 protein

1. Go to https://www.ncbi.nlm.nih.gov/

2. Search "mbp1" under all databases.

3. We get databases under 6 categories (Literature, Genes, Proteins, Genomes, Genetics, Chemicals)

4. Go to Proteins > Protein. There are 836 records. We get a list of GenBankID'ed entries of protein information that has "Mbp1" as keyword.

 Problem with such a simple keyword search: Many other unrelated proteins are also called Mbp1. There's a lot of ambiguity and the search is too non-specific.

5. [https://www.ncbi.nlm.nih.gov/books/NBK3837/ Entrez help page] has many tips of querying and descriptions of databases.
:* Query syntax also supports capitalized BOOLEAN OPERATORS, wildcards (*), "exact matches", (grouping)
:* Does not seem to support regex
:* '''Additionally, there is <nowiki>[indexed fields]</nowiki>''' (e.g. <nowiki>horse[Organism]</nowiki>. explore options under Advanced Search)
:* Can have ranges by using range operator <code>:</code> (e.g. 110:500[Sequence Length])
:* Some special query interpretation abilities as well such as the interpretation of "stopwords" resulting in automatic field mapping.
:* MeSH and Organism fields are controlled vocabularies. Each PubMed record has some MeSH terms associated (as well as taxonomy?). "Queries are automatically mapped to these vocabularies whenever possible" [https://www.ncbi.nlm.nih.gov/books/NBK3837/].

Another good reference compiled by users of this course are [http://steipe.biochemistry.utoronto.ca/abc/students/index.php/Entrez here]

6. Now, search <code>mbp1[protein name] AND "Saccharomyces cerevisiae"[organism]</code>. Get 2 entries.

7. Go to the entry with Accession CAA98618.1. We get a GenBankFF formatted entry.

8. There is a link called "Identical Proteins". There are many identical sequences stored in NCBI.

<span style="color:red">I think there's an error in the [http://steipe.biochemistry.utoronto.ca/abc/index.php/BIN-NCBI#Protein_Sequence learning module content]. XP_ should be inferred/hypothetical whereas NC_ should be genomic.</span>

'''SwissProt is probably the best annotated and curated.'''[http://steipe.biochemistry.utoronto.ca/abc/index.php/BIN-NCBI#Protein_Sequence]

;* Some of the entries are indeed identical (but different sources). Some other ones are not exactly "identical" as they come from different '''''strains'''''.

 The RefSeqID for Mbp1 protein is NP_010227.1

 The UniprotID for Mbp1 protein is P39678.1

9. In Identical Proteins, follow the RefSeq protein record NP_010227.1

10. On the right side, there are a couple functionalities.

 '''Analyze this sequence > Identify conserved domains''': 
 * Protein classification (in terms of domains), graphical view of protein sequence with mapped & annotated domain regions, domain hits with detailed descriptions, sequence alignments, and E-value
 * References

 '''Protein 3D Structure''':
 * No direct panel of comparison of structural determination parameters and quality but are available in each individual entry
 * Can view 3D structure in iCn3D (I don't like it), find similar structures, link to PubMed publication record, links to GenBank protein entries, Conserved Protein Domain Family entries.

 '''Pathways for the MBP1 gene > Cell cycle - yeast''':
 * Dense verbal description of the pathway system, accompanied by a complicated clickable KEGG pathway map.
 * Associated genes, proteins, small molecules and citations

 '''<span style="color:red">Related Information > Proteins with Similar Sequence NO LONGER EXISTS!</span>''' Redirected to Smart BLAST.

;Conclusion: Again, plentiful of cross-references. But nothing beats their literature database PubMed!

;Activity 2 - Explore PubMed

1. Go to the [https://www.ncbi.nlm.nih.gov/protein/NP_010227.1 NCBI Mbp1 record NP_010227.1]

2. On the right, Related Information > PubMed (PubMed articles cited by this protein sequence record). There are 2 entries.

3. Related Information > PubMed(Weighted). Practically, this might be what I'm looking for the most. Not directly cited by the record, but find many relevant information as well. 67 entries.

4. Doc for PubMed https://www.ncbi.nlm.nih.gov/books/NBK3827/. It'd be good to be able to search better.

5. Search in PubMed <code>Mbp1[TI] AND Biochemistry[TA]</code> gives me 3 entries. Voila.

 Articles: 
 Thermodynamics and specificity of the Mbp1-DNA interaction.
 Characterization of the DNA-binding domains from the yeast cell-cycle transcription factors Mbp1 and Swi4.

;Activity 3 - Explore Mbp1_ERECY in NCBI databases

1. Search protein with RefSeqID XP_003645298. "Hypothetical protein"

 '''Analyze this sequence > Identify conserved domains''': 
 * Two different annotations were found compared to SC Mbp1. They are Ank_2 and SMC_prok_B super family (SbcC super family in SC). Both have KilA-N and ANKYR.

 '''Protein 3D Structure''': does not exist (no surprise)

 '''Pathways for the Ecym_2783 gene > Cell cycle - yeast ...''': Looks like annotation transfer..

 PubMed result == PubMed(Weighted) result. Both points to one article {{#pmid:22384365}}

;Conclusion: Again, little is known about Mbp1_ERECY..


==3.9 Databases==
<div class="time-estimate">
Time estimated: 1 h; taken > 35 min; date started: 2019-10-21; date completed: 2019-10-21

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:54, 21 October 2019 (EDT)
</div>

;Choice of database system depends on objectives.

;Database: a layered system of components to store, update and retrieve information

;Users-Interface interactions:
:* Normal users <=> GUI, webpages
:* Applications (require high throughput interface supporting automated multiple queries) <=> API
:* Information systems (e.g. another database) <=> Library (stable accession keys and cross-referencing)
:* Database Admin <=> Console, Command line interface

;Query system:
:* Evaluates queries/interaction requests and turn into consistent language for the actual storage system via the data system
:* Give interfaces what to return to users?

;Storage management:
:* Process actual transactions of data, such as adding, modifying, and retrieving data
:* '''ACID requirements''': atomicity, consistency, isolation, durability (don't know how to actually implement these...)

;Data objects:
:* apart from data objects themselves, real big databases have index tables, stored procedures for high throughput transactions, as well as dictionaries of configurations and statistics of uses

==3.8 Storing Data==

<div class="time-estimate">
Time estimated: 3 h; taken > 3 h; date started: 2019-10-17; date completed: 2019-10-20

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:54, 21 October 2019 (EDT)
</div>

===3.8.1 Data representation===
;Bits: The most elementary representation of data (0 or 1)

;Data formats: specified for storing complex data
:* Flat-file formats: store as files and define ad-hoc rules to specify how the lines of files will be parsed (e.g. FASTA, GenbankFF, PDB files)
	'''Documentation, maintenance, and correct parsing is a big problem with the ad-hoc approaches. i.e. everything breaks if the file format changes'''
:* Structured data grammars: language for storing data, with rules for parsing of which parsing code can be produced automatically (e.g. XML, JSON)

;XML:
:* comes with open and end markups with definitions specified in .dtd files (document type definition)
:* R has some XML parsing packages which are preferred over manual parsing with regex

;JSON:
:* Python-dictionary-like, much more human-readable
:* Two types of contents: {objects} and key<nowiki>:</nowiki>value pairs
:* Versatile data types and complexity for values

===3.8.2 Implementation of relational data models===
* Computer file systems (represent the data model in terms of files and directory trees)

* Place into spreadsheets (e.g. CSV), but analyze data by exporting data from CSV into e.g. R data frames

* "Real" databases for large-scale, robust data requirements. (e.g. MySQL, Postgresql, dplyr...)

===3.8.3 Running through BIN-Storing_data.R===
;Useful commands:
:* '''rm()''': remove object from memory
:* '''order(x)''': returns a vector of array indices of x ordered based on the items in x
:* '''file.show(<path>)''': display plain text file specified by <path>(string)
:* '''unlist(<list>)''': flatten/simplify <list> into a vector

;Objectives:
:* Learn how to build a database in R (in terms of a list of data frames)

;Activity 1 - Build a database of philosophers


;Activity 2 - Use JSON to organize database for Mbp1-like proteins
R-package: jsonlite
* Useful functions:
:* '''fromJSON(<path>)''': read and parse from .json file specified by <path>(string) and returns a data frame
:* '''dbSanitizeSequence()''': for parsing. Clean-up and returns a single string of one-letter code protein sequence (all uppercase)
:* '''dbInit()''': generates a list of data frames to represent the relational database

;Activity 3 - Find a protein from MYSPE most similar to Mbp1 to be added to the database

1. To find such protein, BLAST: https://blast.ncbi.nlm.nih.gov/Blast.cgi

2. Protein BLAST

3. Query Sequence = NP_010227, Database = Reference Proteins (refseq_protein), Organism = Eremothecium cymbalariae

4. BLAST!

7 sequences found that produce significant alignments. The first sequence has E-value rounded to 0.0 (Sequence_ID XP_003645298.1)

Link to the protein: https://www.ncbi.nlm.nih.gov/protein/XP_003645298.1?report=genbank&log$=protalign&blast_rank=1&RID=UT6SVB5U014

Link to the organism: https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=931890


;Activity 4 - Put information pertaining to MYSPE into JSON files
1. Find UniprotID at https://www.uniprot.org/mapping/

2. Query XP_003645298 from RefSeq Protein to UniProtKB

The UniprotID is G8JQ18

3. To get a protein sequence, copy from the NCBI protein info page and use <code>dbSanitizeSequence()</code>

4. To store in JSON, use the following script:

<source lang="R">
lengthToLookNice <- 70

MYSEQ <- "        1 msstsvasrd qiysakysgv evyefihptg simkrkaddw vnathilkaa kfakakrtri
       61 lekevikdih ekvqggfgky qgtwvpldia rrlaekfdvl eelrplfdfs qrdgsasppq
      121 apkhhhasrs dstkkgtgks psgalnnasg svipkrrgrp prskkldrip asgdaalqrs
      181 rsdvtgfhkp sitistissh nlpsiqstlq rgvnideqqh yqdklqqqis qqkyeeldie
      241 dglssdietn layiaegpvg snrlntqlmt gkeepvssss slpsspsdfs apvpfdtqrv
      301 gsatspigam lprysmqsrp ptsdldqkvn dylaklvdyf insemqntna vpiellnpph
      361 stpyidawid sehhtafhwa camgnlpive allqagashr avnhagetpl mrasmfhnsy
      421 tkrtyprifq llqdtvfdid sqsqtvvhhi vkrrsntqsa lyyldvllsk ikdfspqyri
      481 etlintqddk gntplhiaai ngdkkffqtl lgsgalstlk nydgvtadvf innkfsrtln
      541 ysehsyhygn gtthspasts tgavitgpag aaaasasasf ihtgdmfpsq aatsvsraip
      601 evinlmkdma dsyqglyqdr sqelqsikkm lksmnntvas vdikiletld ikkyeqigqt
      661 meditqaide lqsrftvkqk clmnilekgq riqlqrline qeqeidkhqe esesksgpsi
      721 npnlitgike lailqlrrka kikqmlellc gnskvqkfrk misqgtdmel devdnfldvi
      781 lqqlnddnea kkinnpngvt"

cleanSeq <- dbSanitizeSequence(MYSEQ)

(seqLength <- nchar(cleanSeq))

toStore <- character()
i <- 0
while (i*lengthToLookNice+1 <= seqLength) {
    toStore[i+1] <- substr(cleanSeq, start=i*lengthToLookNice+1, stop=(i+1)*lengthToLookNice)
    i <- i + 1
}

toStore
</source>

5. Create MYSPEtaxonomy.json with only one entry of MYSPE

6. Both JSON files validated at https://jsonlint.com/

;Activity 5 - Make an R script to create my own database
<span style="color:red">'''Because I keep my makeProteinDB.R and JSON files in my own BCH1441 folder for my version control, I have to <code>source("../makeProteinDB.R")</code>'''</span>

<span style="color:red">'''Because successfully sourcing ABC-createRefDB.R requires <code>getwd() == C:/Users/Wilson/Documents/BCH1441/ABC-units</code> in my RStudio setup, I have to setwd() after sourcing ABC-createRefDB.R or change all the paths appropriately'''</span>

* Useful functions:
:* '''View(<dataframe>)''': view dataframe in terms of a readable table in RStudio

Protein sequence is correct. Copy and paste the whole sequence into Protein BLAST gives 100% match to the intended protein.


==3.7 Biomolecular Function==

<div class="time-estimate">
Time estimated: 0.5 h; taken 25 min; date started: 2019-10-28; date completed: 2019-10-28

~~~~
</div>

;Function: More than just the activity of biomolecules.
:* Consider: in vitro vs in vivo functions, context/cell-dependent function, promiscuous functions
:* function is more appropriately understood as a concept imposed by us to make sense of/explain/categorize observed biomolecular activities and behaviours.

;Questions in bioinformatics pertaining to functions: define, represent, annotate, and predict

;Functions can be:
1) high-level (e.g. cell survival)

2) intermediate (e.g. exocytotic pathway)

3) specific (e.g. catalyze a specific reaction)

However elusive biomolecular function might be, one thing for sure: functions are tied to evolution.
:* Function can be understood as the aspect of the biomolecule behaviour under purifying selection

;Annotation of biomolecular function: Depends on the molecule as well as the '''''database context'''''.
:* e.g. function of an amino acid in contribution to a protein structure/stability, function of DNA-binding site in gene regulation etc.

;Function representations:
:* E.C. numbers: type of catalyzed reaction
:* Pathways: as a member of collaborating biomolecular system
:* Gene ontology (GO)/OBO: hierachial assembly of knowledge with relationships such as is_a, has_a

;Prediction of biomolecular functions:
:* Ab initio: e.g. structural patterns of residues
:* Homology/annotation transfer
:* Association: associated in networks of co-expression, co-regulation, PPI etc.


==3.6 Sequences==

<div class="time-estimate">
Time estimated: 1.5 h; taken 1.5 h; date started: 2019-10-26; date completed: 2019-10-26

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:27, 28 October 2019 (EDT)
</div>

;Sequences are a great abstraction of bio-macromolecules: computable, compact and understandable

;There are limitations: ambiguity, limited information content (e.g. no modifications, no annotations), cross-comparison of related sequences

;Chromosome/genome location annotations:
Human's starts from the telomere of the short arm to the telomere of the long arm.

e.g. 7p14.1 means '''chromosome 7, short arm, band 14 from telomere out (bands shown after Giemsa dye), subregion 1.

;Important to keep in mind that sequences in biology are not static, and many processes can change/modify them.

===3.6.1 Running through BIN-Sequence.R===
;install.packages("stringi")

;R-packages that manage biological sequences - Biostrings

;Useful functions:
:* Biostrings::DNAString(), Biostrings::RNAString(), Biostrings::AAString(): convert string sequence into a complex sequence object (can be converted back by as.string())
:* <span style="color:red">substring(<string>, start, end): unlike substr(), start and end can both be vectors!</span>
:* sprintf(): very cool. Also apparently vectorized. Support placeholders (%s: string %d: digit %f.n: fraction with n digits after the decimal shown)
:* <span style="color:red">Use cat() to display things like '\n' properly</span>

Some more string methods:
:* tolower() OR toupper()
:* stringi::stri_reverse() <span style="color:red">'''(Line 180: reverse() does not work for me for some reason?! But rev() works, though it reverses vector order though..)'''</span>

 <span style="color:green">'''Solution: it seems like the line should be Biostrings::reverse()'''</span>

:* chartr(old, new, <string>): change the characters in <string> that are in <code>old</code> into corresponding characters in <code>new</code>
:* letters & LETTERS: built-in variables of vectors of lowercase and uppercase letters
:* gsub(<pattern>, <replacement>, <string>): substitute <pattern> in <string> into <replacement>. Supports regex (A useful punchline: <code>s <- gsub("\\s", "", s)</code>)
:* stringi::stri_match_all(<string>, regex = <regex>): match and extract all <regex> matching substrings in <string>


==3.5 Abstractions==

<div class="time-estimate">
Time estimated: 30 min; taken 35 min; date started: 2019-10-15; date completed: 2019-10-15

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 11:39, 15 October 2019 (EDT)
</div>

;Motivation:
:* Making biology "computable". Extract the essential parts and represent them effectively.
:* Central part in modelling biology
:* Keep in mind that the abstraction itself is not biology though!
:* Draw rigorous and potentially powerful and complete conclusions. (re. knot example)

;Elements of modelling biology:
:* Represent biology as data
:* Define the rigorous/unambiguous meaning of data
:* Define operations and algebras with data
:* Metrics to represent the target properties

;Elements of abstraction:
:* Define the labels
:* Structure the relationships between labels (recall normalized data models)

;We make inferences about biology from its model

;Controlled Vocabulary: uniquely defined to represent an item

;Ontology: a set of terms in terms of controlled vocabularies and relationships between them
:* define the semantics (e.g. "Is a ..." relationship)


==3.4 MYSPE ==

<div class="time-estimate">
Time estimated: 1 h; taken 35 min; date started: 2019-10-14; date completed: 2019-10-14

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 22:30, 14 October 2019 (EDT)
</div>

;Motivation:
:* Define protein function in terms of computable entities and characterize it as part of a system with collaborating components
:* To make inferences about protein function, we often have to extend knowledge about protein function from well-characterized '''model organisms'''

===3.4.1 Model Organisms===
* Extensively characterized, methods readily available
* Value is primarily for transfer biological knowledge to other organisms

===3.4.2 Choosing MYSPE===
;Objective:
:* Through model-organism reasoning, infer the function of Mbp1 protein in related species of fungi from ''Saccharomyces cerevisiae''. 
:* Choose a species to work with. The species in question will need to have the whole genome sequenced.

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Configuration messages after init() ABC-units project'''''

'''''I recently resetted/wiped out my computer so that might be why'''''

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 22:30, 14 October 2019 (EDT)
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/jsonlite_1.6.zip'
Content type 'application/zip' length 1162207 bytes (1.1 MB)
downloaded 1.1 MB

package ‘jsonlite’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpyKqYBu\downloaded_packages
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
also installing the dependencies ‘sys’, ‘askpass’, ‘curl’, ‘mime’, ‘openssl’, ‘R6’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/sys_3.3.zip'
Content type 'application/zip' length 59866 bytes (58 KB)
downloaded 58 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/askpass_1.1.zip'
Content type 'application/zip' length 64780 bytes (63 KB)
downloaded 63 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/curl_4.2.zip'
Content type 'application/zip' length 4123128 bytes (3.9 MB)
downloaded 3.9 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/mime_0.7.zip'
Content type 'application/zip' length 48231 bytes (47 KB)
downloaded 47 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/openssl_1.4.1.zip'
Content type 'application/zip' length 3971462 bytes (3.8 MB)
downloaded 3.8 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/R6_2.4.0.zip'
Content type 'application/zip' length 58850 bytes (57 KB)
downloaded 57 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/httr_1.4.1.zip'
Content type 'application/zip' length 511180 bytes (499 KB)
downloaded 499 KB

package ‘sys’ successfully unpacked and MD5 sums checked
package ‘askpass’ successfully unpacked and MD5 sums checked
package ‘curl’ successfully unpacked and MD5 sums checked
package ‘mime’ successfully unpacked and MD5 sums checked
package ‘openssl’ successfully unpacked and MD5 sums checked
package ‘R6’ successfully unpacked and MD5 sums checked
package ‘httr’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpyKqYBu\downloaded_packages
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
also installing the dependency ‘Rcpp’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/Rcpp_1.0.2.zip'
Content type 'application/zip' length 4535652 bytes (4.3 MB)
downloaded 4.3 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/xml2_1.2.2.zip'
Content type 'application/zip' length 3503035 bytes (3.3 MB)
downloaded 3.3 MB

package ‘Rcpp’ successfully unpacked and MD5 sums checked
package ‘xml2’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpyKqYBu\downloaded_packages
</code>
</div>
</div>

;Activity -- Get MYSPE through <code>~/BCH1441/ABC-units/BIN-MYSPE.R</code>

:* Not much is known about ''Eremothecium cymbalariae'', according to Wikipedia.

:* Taxonomy: Fungi > Ascomycota > Saccharomycotina > Saccharomycetes > Saccharomycetales > Dipodascaceae > ''Eremothecium''
:* Shares the same order as ''Saccharomyces cerevisiae''
:* Produces aerial mycelium (filamentous, like mushrooms) instead of growing like yeast [NCBI, https://www.sciencedirect.com/science/article/pii/S0960982206000418]
:* Genome size of 9.6Mb, 8 chromosomes

==3.3 Data Models==

<div class="time-estimate">
Time estimated: 1 h; taken 4.5 h; date started: 2019-10-11; date completed: 2019-10-17

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:07, 25 October 2019 (EDT)
</div>

The motivation for constructing appropriate database models -- how to store data for efficient computation and avoid errors by ensuring self-consistency.

===3.3.1 Data organizing principles===
;Normal Form: A data model is normalized so to "reduce data redundancy and improve data integrity" [https://en.wikipedia.org/wiki/Database_normalization]

;Primary Key: a label that uniquely identifies a record in the database.
:* Pointing to information. Not storing information. It should not depend on the underlying mutable information.
:* However, it can contain information about the database, rather than about an individual record.
:* It's desirable that I define my own primary keys and maintain them myself, so that I can ensure they aren't mutable.
e.g. Instead of storing protein name, which is not unique (many proteins have the same name but in different species) and can result in duplicate storage, use a unique ID independent of entry attributes

;Foreign Key: a primary key in a different table. Appears in current table for cross-referencing.
:* Do not store information/attributes for an entity that does not depend on the entity (unless for computational load reasons... in this case have to ensure the fields are updated).
:* For these attributes, I would create a new table, each entity with a unique primary key. Then, cross-reference.
e.g. The species an entry in ''Proteins'' belongs to would not be stored in ''Proteins'' because species does not depend on the specific protein.

Create a new table called ''Taxonomy'' for cross-referencing.

Each ''Protein'' entity will map to only one ''Taxonomy'', but each ''Taxonomy'' entity can map to any number of ''Protein'' entities. (Species does not depend on the specific protein, but a specific protein corresponds on a unique species)

;Cardinality: How often can we expect a key value to appear in a different table.

;Relationship: a relationship between two tables are described by referencing the primary key of a different table and the cardinalities of such relationship.

;Cardinalities can be used to check my data model:
:* N-to-N: inconsistent model? (e.g. a map between a protein entity and its functions?)
:* 1-to-1: redundant. Attribute depends on the entity and can be stored in the table of the entities (e.g. a map between a protein entity and its protein sequence).

;Store atomic values as attributes:
:* Although what is considered atomic is context dependent.
:* The bottom line is, the data model is such that I only need to parse my data once when I enter it into database.
e.g. For domain regions, it would make sense to store starting residue number and ending residue number separately.

;The value of an attribute should necessarily and sufficiently depend on the entire primary key.
:* This is not the case if I were to create a Feature table whose primary key is a '''composite key''' (protein entity + feature entity).
e.g. Protein-to-Domain map in the course notes example, and Protein-to-Function map suggested above (N-to-N problem). Duplication and inconsistent name problem.

Solution:
;Joint Table (or Junction Table/Associative Entity)
e.g. Create an annotation table with annotation primary keys in the above example. This is a commonly used approach.

'''''The bottom line'''''

* The value of an attribute is specific to the entity record in the table (i.e. functionally dependent on the primary key).
* All attribute is atomic.
* All information is unique (no duplication! Duplicate storing information can risk screwing up and is a bad idea!)

===3.3.2 Build a relational data model for transcription factors===
;Objective: practise constructing a relational data model for the following question:

 Some of the proteins that you might want to store are transcription factors. 
 A transcription factor has a canonical binding site sequence, and there are sequences it actually has been observed to bind to. 
 The actual binding instances in specific locations may have genes associated with them, which encode proteins. 
 You might come up with other facts that are important too.

One version:

[[File:ERDversion1.jpg|500px]] 

Another version (if my idea of "double-joint" works/is a thing.. this would allow getting information of activation or repression of expression):

[[File:ERDversion2.jpg|500px]] 

==3.2 Information Sources for Bioinformatics==

;Canadian Bioinformatics Workshops: https://bioinformatics.ca/
:* Workshops, many learning resources

;International Society for Computational Biology: http://iscb.org

;Journals
:* ''Bioinformatics''
:* ''Nucleic Acids Research'' (It has a really nice current database volume and a Web service volume for each year. 2019 Check out: EncoMPASS<ref>EncoMPASS: an online database for analyzing structure and symmetry in membrane proteins</ref>, The MemProtMD database</ref>The MemProtMD database: a resource for membrane-embedded protein structures and their lipid interactions</ref>)
:* ''BMC Bioinformatics''
:* ''PLoS Computational Biology''

 For each bioinformatics resources/services, look for:
 1. what to expect with such resources and 
 2. how to use the services

==3.1 Motivation==
===3.1.1 Molecular biology can be understood in terms of information flow===
;Dogma:
: DNA sequences --> protein structure --> protein interactions & assembly --> functional circuits of biological systems

;However, we seem to not be able to deterministically infer higher level information from lower level at each step.
: What's getting in the way -- '''incomplete information'''

===3.1.2 Funfamental task: Data management===
* Amount of biological data is huge
* The field is evolving '''very rapidly'''
* Need to make things query-able
* Many challenges: data & service overload, poor integration ...

===3.1.2 Funfamental task: Modelling===
* "Data alone does not explain itself." (B. Steipe)
* It's often not entirely clear what are the best data resources, best analysis tools or services. Again, things go outdated very fast, and it's not often not straightforward to compare resources [insight!]
* This necessitates that bioinformatics is not just about data itself. Bioinformatics aims to contribute to the understanding of biology through modelling.
* This necessitates focusing on objectives rather than methodology.
* Activities have to turn into better understanding. Otherwise, it would just be cargo cult [insight!].

{{Vspace}}
