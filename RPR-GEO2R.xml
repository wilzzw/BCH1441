The following content is submitted for credit for the learning unit '''[http://steipe.biochemistry.utoronto.ca/abc/index.php/RPR-GEO2R RPR-GEO2R]'''

<source lang="R">
#Line 147-150
#TASK> What are the data:
#TASK>  ... in each cell?
#TASK>  ... in each column?
#TASK>  ... in each row?
</source>

Each cell contains log ratio of expression of a given gene (row) at a given timepoint/sample with GEO sample ID (column)

<source lang="R">
#Line 155
#TASK>  What are these experiments?
</source>

At intervals, experiment measures the expression levels of genes at regular cell cycle time points.

Cells start out synchronized at the beginning of cell cycle.

<source lang="R">
#TASK>     Study this boxplot. What's going on? Are these expression values?
#TASK>     What do the numbers that exprs() returns from the dataset mean?
</source>

These are log ratio of expression of genes.

Seems like on average expression levels of all genes considered herein are more or less constant over the cell cycle.

<source lang="R">
#TASK>   Study this plot. What does it tell you? Is there systematic, global
#TASK>   change in the values over time? Within a cycle? Over the course of the
#TASK>   experiment?
</source>

[[File:distribution_t.png|500px]]

The genes overexpressing and underexpressing becomes apparent at time points 30 min and 60 min, as the distributions at these timepoints are wider.

I find it strange that at 90 min and 120 min, the expression levels normalize back to around timepoint 0 min. But 90 min is the midpoint of the second cell cycle?

Also find it strange that at 60 min, approximately the end of the first cell cycle, there are more differentially expressed genes just like at midpoint of 30 min.

<source lang="R">
#TASK>  Try to answer the following questions:
#TASK>     Are all rows genes?
#TASK>     What identifiers are being used?
#          (cf. https://sites.google.com/view/yeastgenome-help/community-help/nomenclature-conventions)
#TASK>     Are all rows/genes unique?
#TASK>     Are all yeast genes accounted for?
</source>

Most of rows are genes though not all rows are. Some are "blanks" and non-yeast controls, presumably required for this type of experiment.

Identifiers are SGD IDs.

To answer the latter two questions, I developed the code below:
<source lang="R">
# This line takes a very long time to done correctly
# At first I assumed "SGD_features.tab" is formatted poorly, so I use fill = TRUE
# I could not get the nrow(SGD_features) correctly, but opening as csv works properly.
# I pinned down the first instance of problematic line to be Line 75 in "SGD_features.tab"
# There is a single quote ' in the description of Line 75, where "3'" is mentioned
# "SGD_features.README.txt" had some quote issues as well. In ?read.table, looks like the argument quote solves the problem
# fill = TRUE is not necessary. Turns out the format is done nicely (I guess...) for parsing 
SGD_features <- read.table("./data/SGD_features.tab", sep = "\t", quote = "", stringsAsFactors=FALSE)

# Name its columns according to "SGD_features.README.txt"
colnames(SGD_features) <- c("Primary SGDID", 
                            "Feature type", 
                            "Feature qualifier", 
                            "Feature name", 
                            "Standard gene name", 
                            "Alias", 
                            "Parent feature name",
                            "Secondary SGDID",
                            "Chromosome",
                            "Start_coordinate",
                            "Stop_coordinate",
                            "Strand",
                            "Genetic position",
                            "Coordinate version",
                            "Sequence version",
                            "Description")

#Select essential information and rename to be consistent with provided source code
subset <- c(1:5, 16)
SGD_features <- SGD_features[,subset]
colnames(SGD_features) <- c("SGDID",
                            "type",
                            "qual",
                            "sysName",
                            "name",
                            "description")

# Remove all rows that don not have a systematic name
hasSysName <- as.logical(nchar(SGD_features[, "sysName"]))
SGD_features <- SGD_features[hasSysName,]

# All systematic names are unique?
(! any(duplicated(SGD_features[,"sysName"])))

# Name rows after systematic names
rownames(SGD_features) <- SGD_features[,"sysName"]

# How many "genes" in the expression dataset is not in SGD features (yeast genome)?
notInFeatures <- setdiff(rownames(Biobase::exprs(GSE3635)), rownames(SGD_features))
(length(notInFeatures))
# Above is not actually the number of genes not in yeast genome. Some of them were actually names of controls and from other species
# The number of yeast reading frame that is not in SGD features database is:
(length(notInFeatures[-1:-11])) #63
# These are probably the ones later shown taht are not actually yeast genes.

# How many / which genes in the feature table do not have expression data?
noData <- setdiff(rownames(SGD_features), rownames(Biobase::exprs(GSE3635))) 
#1907 entries. Though not all of them are genes though e.g. centromere. 
# grep() according to SGD_features[,"type"] can be helpful for that purpose, or filtering
# Assume all genes are of type "ORF", then:
noData <- setdiff(rownames(SGD_features)[SGD_features[,"type"] == "ORF"], rownames(Biobase::exprs(GSE3635)))
length(noData) #496

#In the expression dataset, any genes that are duplicated?
any(duplicated(rownames(Biobase::exprs(GSE3635)))) #FALSE
</source>

Therefore, there are 1907 features in the database not accounted for in the expression data. That includes 496 open reading frames (genes).

No, the expression dataset does not have duplicated genes.

<source lang="R">
#TASK>  Plot expression profiles for these genes and study them. What do you
#TASK>  expect the profiles to look like, given the role of these genes? What
#TASK>  do you find? (Hint: you will make your life much easier if you define
#TASK>  a function that plots and prints descriptions with a gene name as input.
#TASK>  Also: are the gene names in the feature table upper case, or lower case?
#TASK>  Also: note that the absolute values of change are quite different.
#TASK>  Also: note that some values may be outliers i.e. failed experiments.)
</source>

I developed the following code to do that:

<source lang="R">
#TASK>  Plot expression profiles for these genes and study them. What do you
#TASK>  expect the profiles to look like, given the role of these genes? What
#TASK>  do you find? (Hint: you will make your life much easier if you define
#TASK>  a function that plots and prints descriptions with a gene name as input.
#TASK>  Also: are the gene names in the feature table upper case, or lower case?
#TASK>  Also: note that the absolute values of change are quite different.
#TASK>  Also: note that some values may be outliers i.e. failed experiments.)

plotGene <- function(gName, color) {
    #Make sure it is uppercase
    gName <- toupper(gName)
    # Get index in SGD_features where the input gene occurs
    iFeature <- which(SGD_features$name == gName)
    # Get index in expression data GSE3635 where the input gene occurs
    iExprs <- which(Biobase::featureNames(GSE3635) == SGD_features$sysName[iFeature])

    # Plot it
    plot(seq(0, 120, by = 10),
         Biobase::exprs(GSE3635)[iExprs, ],
         main = "Expression profile",
         xlab = "time (min)",
         ylab = "expression",
         ylim = range(c(-2,2)),
         type = "b",
         col = color)

    # Description
    cat(sprintf("Gene Description: %s", SGD_features$description[iFeature]))
}

getColors <- function(numColors) {
    # Divide into intervals, whose values will be assigned to colors
    unitVals <- 1 / numColors
    comp1 <- seq(1, 0, length.out=numColors)
    comp2 <- seq(0, 1, length.out=numColors)

    colorOut <- c()
    for (i in 1:numColors) {
        colorOut[i] <- rgb(comp1[i], comp2[i], 0) # This is just the red mode. I am not familiar with how to select blue modes elegently in R
    }
    return(colorOut)
}

plotGeneSeries <- function(gNames) {
    allColors <- getColors(length(gNames))
    for (i in seq_along(gNames)) {
        color <- allColors[i]
        plotGene(gNames[i], color)
        # https://stackoverflow.com/questions/2564258/plot-two-graphs-in-same-plot-in-r
        par(new=TRUE)
    }
    legend("topleft", gNames, fill = allColors, bty = "n")
    abline(h =  0, col = "#00000055")
    abline(v = 60, col = "#00000055") 
}

onGenes <- c('Cdc14', 'Mbp1', 'Swi6', 'Swi4', 'Whi5', 'Cdc28', 'Cln1', 'Cln2', 'Cln3')
plotGeneSeries(onGenes)

offGenes <- c('Rad53', 'Cdc28', 'Clb1', 'Clb2', 'Clb6', 'Nrm1')
plotGeneSeries(offGenes)

hkGenes <- c('Act1', 'Alg9')
plotGeneSeries(hkGenes)
</source>

Expect a cyclical expression level pattern for on-genes and off-genes, but more or less constant levels for house-keeping genes.

[[File:OnGEO.png|500px]]

[[File:OffGEO.png|500px]]

[[File:hkGEO.png|500px]]

{{CC-BY}}
[[Category:EVAL-RPR-GEO2R]]