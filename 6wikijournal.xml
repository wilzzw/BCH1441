=6 Genes and Genome=
==6.4 Genome Bioinformatics==

<div class="time-estimate">
Time estimated: 1.5 h; taken 1 h; date started: 2019-12-1; date completed: 2019-12-1

~~~~
</div>

===6.4.1 Genome sequencing and data===
;Motivation:
Next-generation sequencing tremendously expanded the possibility of parallel, high throughput acquisition of genome-wide data and genome scale analysis.

;First-generation sequencing:
:* Classical: Sanger

;Second-generation sequencing (parallel):
:* Pyrosequencing
:* Ion torrent
:* Illumina (still most widely used as of 2017)

;Third-generation sequencing (single-molecular level):
:* e.g. system by PacBio based on confocal microscopy fluorescence readout

;Storage and maintenance of genomic data:
:* Base calling: extraction of sequence from raw data (base by base). Output is a sequence (common: FASTQ format)
:* Sequence assembly/trimming: individual sequences acquired, then look for overlaps to asseble the whole sequence (e.g. methods of overlap extension making use of de Bruijn graphs of base k-mers)
:: Also removes low quality sequences
:* Vector trimming: remove contaminating vector sequence (crossmatch and with a vector sequence database)
:* Data storage: A variable cost. Know that we are dealing with HUGE data size. 

===6.4.2 Genome annotation===
;Motivation:
Annotate subsequences of genome sequence with their roles

;Challenges:
Types of elements/contents in genome is hugely diverse. Complicated transcription, also non-coding elements.
:* e.g. functional classes of RNA is a rapidly evolving research process

;Gene identification in the genome:
:* Analysis by signal: e.g. translation start sites, poly-A, intron/exon boundary signals or splice sites
:* Analysis by contents: e.g. codon bias for transcribed sequences
:* Analysis by homology: e.g. sequence similarity, alignment and phylogenetic footprinting
:* Through interpretation of transcriptome: e.g. derived from RNASeq data (caveat: genes not expressed or in low abundance in the sample)

;Sources of errors:
alignment errors, mis-identification of correct start codon

'''''Early genome annotation draft is very error prone!'''''

;The ENCODE (Encyclopedia of DNA Elements) project:
Consortium aims to annotate all functional aspects of model organism genomes

;Genome OnLine Database (GOLD)

'''Genome annotation methods and paradigm are rapidly evolving. Best to stay current.'''

===6.4.3 Genome browsers===


==6.3 Mutation Impact==
;Activity:
Simulate point mutations of three genes (KRas, PTPN11, OR1A1) related to oncogenesis and analyze the outcomes of these mutations.

1. Build an R-code to perform such simulation experiment and compile the frequencies of each type of mutations:
[[User:Zhi Wei Zeng/ABC-INT-Mutation_impact| Link to the R-code for the activity]]

2. Modify and build on the R-code to plot the data from simulated mutation frequency distribution and frequency distribution obtained from IntOGen.

I excluded a splice-site mutation found in the database of PTPN11. Not applicable here.

Outcomes of simulated mutation type frequencies:
               KRas  PTPN11   OR1A1
 synonymous 0.20638 0.21112 0.23323
 missense   0.74205 0.74102 0.73326
 nonsense   0.05157 0.04786 0.03351

[[File:simulated.jpg]]

Mutation type frequencies obtained from IntOGen:
                   KRas     PTPN11      OR1A1
 synonymous 0.008658009 0.13306452 0.32989691
 missense   0.990043290 0.84677419 0.62371134
 nonsense   0.001298701 0.02016129 0.04639175

[[File:from_IntOGen.jpg]]

Distribution for KRas according to the database seems wildly different than my simulated results. As for PTPN11 and OR1A1, somewhat different but not as much.

3. To quantify the difference in distributions, I decide to use Kullback–Leibler divergence method.

<source lang="R">
#This code should continue from the "Link to the R-code for the activity"
#Compute KL-divergence. Without considering the lengths of p and q
KL_Div <- function(p, q) {
    val <- sum(p * log(p / q))
    return(val)
}

#For KRas...
(KL_Div(freqDistributions[,"KRas"], databaseFreqDistributions[,"KRas"])) #0.6303814

#For PTPN11...
(KL_Div(freqDistributions[,"PTPN11"], databaseFreqDistributions[,"PTPN11"])) #0.0399703

#For OR1A1...
(KL_Div(freqDistributions[,"OR1A1"], databaseFreqDistributions[,"OR1A1"])) #0.02687701
</source>

;Conclusions:
:* KL-divergence value for my simulated distribution vs IntOGen database is much larger for KRas than for PTPN11 and OR1A1. I am tempted to say that there is important difference for KRas but not the other two.
:* I have not determined how unlikely are my KL-divergence values. To do that, I will  simulate P-values for them.

==6.2 Genetic Code Optimality==
;Objective: Do a computational experiment outlined in RPR-Genetic_code_optimality.R to study how nature arrived at the universal genetic code

<div class="time-estimate">
Time estimated: 1 h; taken 85 min; date started: 2019-10-28; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 12:56, 28 October 2019 (EDT)
</div>

Line 99-131: Functions defined to generate alternative genetic codes.

;Activity 1 - Explore the effect of mutations on a sequence if alternative genetic code were used.

;Plan: "Reverse-translate" a protein sequence Mbp1 into a nucleotide sequence, make mutations, and translate it back.
:* Observe: See whether different genetic codes differ in mutation severity.

Methodologies defined into functions.

Line 218-220: To determine severity of mutation, first group amino acids into biophysical categories (hydrophobic, hydrophilic, neutral)

Line 222-226: Give different types of mutations penalty scores (e.g. nonsense mutation has the highest penalty).

Define a function to evaluate mutation severity based on the penalty scores.

Line 268:
<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
Warning messages for: <code>myDNA <- readLines("./data/S288C_YDL056W_MBP1_coding.fsa")[-1]</code>
<div class="mw-collapsible-content">
<code>
Warning message:
In readLines("./data/S288C_YDL056W_MBP1_coding.fsa") :

incomplete final line found on './data/S288C_YDL056W_MBP1_coding.fsa'
</code>
</div>
</div>

(I feel like I have seen this warning message somewhere when reading from file in another learning unit. Basically it's better to end with something like '\n'? A good practice to end..)

Run a number of random trials of mutation experiments and histogram the resulting mutation penalties.

Run the same experiment using an alternative set of genetic code. Compare the histograms.

Conclusion: Histograms suggest the mutations have greater risky impact for the alternative genetic code than the standard genetic code used by nature.

[[File:Std_vs_synth_genCode.png|500px]]

;Activity 2 - Run the same experiment for amino acid-swapped genetic code

R-code below for running such experiment
<source lang="R">
N <- 200
valSWGC <- numeric(N)

set.seed(112358)
for (i in 1:N) {
    swGC <- swappedGC(stdCode)
    x <- traRev(myAA, swGC)
    x <- randMut(x)
    x <- traFor(x, swGC)
    valSWGC[i] <- evalMut(myAA, x)
}
set.seed(NULL)

#Optionally recover the histogram for standard genetic code
hist(valSTDC,
     breaks = 15,
     col = "palegoldenrod",
     xlim = c(0, 400),
     ylim = c(0, N/4),
     main = "Standard vs. Swapped Genetic Code",
     xlab = "Mutation penalty")

hist(valSWGC,
     col = "plum",
     breaks = 60,
     add = TRUE)
</source>

;Conclusion: Overall alternative genetic code generated by swapping encoding amino acids produce more severe mutations than standard genetic code.

: Seems not as bad as a randomly generated genetic code in the previous example though.

[[File:Std_vs_swapped_genCode.png|500px]]

==6.1 Genetic Code==
;Objective: Use R and the package Biostrings to work with genetic code

<div class="time-estimate">
Time estimated: 1 h; taken > 3h; date started: 2019-10-15; date completed: 2019-10-16

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:59, 16 October 2019 (EDT)
</div>

===6.1.1 Preparation: FND-Genetic_code.R===

;Install BiocManager
<source lang="R">
install.packages("BiocManager")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/BiocManager_1.30.7.zip'
Content type 'application/zip' length 97999 bytes (95 KB)
downloaded 95 KB

package ‘BiocManager’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpumGMrj\downloaded_packages
</code>
</div>
</div>


;Install Biostrings
<source lang="R">
BiocManager::install("Biostrings")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
Bioconductor version 3.9 (BiocManager 1.30.7), R 3.6.1 (2019-07-05)
Installing package(s) 'BiocVersion', 'Biostrings'
also installing the dependencies ‘zlibbioc’, ‘BiocGenerics’, ‘S4Vectors’, ‘IRanges’, ‘XVector’

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/zlibbioc_1.30.0.zip'
Content type 'application/zip' length 374970 bytes (366 KB)
downloaded 366 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/BiocGenerics_0.30.0.zip'
Content type 'application/zip' length 736201 bytes (718 KB)
downloaded 718 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/S4Vectors_0.22.1.zip'
Content type 'application/zip' length 2035683 bytes (1.9 MB)
downloaded 1.9 MB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/IRanges_2.18.3.zip'
Content type 'application/zip' length 2379794 bytes (2.3 MB)
downloaded 2.3 MB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/XVector_0.24.0.zip'
Content type 'application/zip' length 714038 bytes (697 KB)
downloaded 697 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/BiocVersion_3.9.0.zip'
Content type 'application/zip' length 8915 bytes
downloaded 8915 bytes

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/Biostrings_2.52.0.zip'
Content type 'application/zip' length 14372143 bytes (13.7 MB)
downloaded 13.7 MB

package ‘zlibbioc’ successfully unpacked and MD5 sums checked
package ‘BiocGenerics’ successfully unpacked and MD5 sums checked
package ‘S4Vectors’ successfully unpacked and MD5 sums checked
package ‘IRanges’ successfully unpacked and MD5 sums checked
package ‘XVector’ successfully unpacked and MD5 sums checked
package ‘BiocVersion’ successfully unpacked and MD5 sums checked
package ‘Biostrings’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpumGMrj\downloaded_packages
installation path not writeable, unable to update packages: boot, foreign,
  KernSmooth, mgcv, nlme
</code>
</div>
</div>

===6.1.2 Running through FND-Genetic_code.R===

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">

    
<div class="mw-collapsible-content">
<source lang="R">
#setwd("C:/Users/Wilson/Documents/BCH1441/ABC-units")
#source("FND-Genetic_code.R")

# Task: What do you need to change to print the table with U instead
#         of T? Try it.
for (i in seq_along(dim(cCube))) {
    dimnames(cCube)[[i]][4] <- "U"
}

# Task: Point mutations are more often transitions (purine -> purine;
#         pyrimidine -> pyrimidine) than transversions (purine -> pyrimidine;
#         pyrimidine -> purine), even though twice as many transversions
#         are possible in the code. This is most likely due a deamination /
#         tautomerization process that favours C -> T changes. If the code
#         indeed minimizes the effect of mutations, you would expect that
#         codons that differ by a transition code for more similar amino acids
#         than codons that differ by a transversion. Is that true? List the set
#         of all amino acid pairs that are encoded by codons with a C -> T
#         transition. Then list the set of amino acid pairs with a C -> A
#         transversion. Which set of pairs is more similar?

#I'm not sure whether I understand this question correctly but:
#All of them that contain "C"
codonWithC <- genCode[grep("C", names(genCode))]
codonVector <- genCode[1:length(genCode)] #For some reason...
#codonVector <- as.vector(genCode) #For some reason...
#names(codonVector) <- names(genCode)
#dictWith1C <- dictWithC[-grep("CC", names(dictWithC))]

mutate <- function(codon, from, to) {
    codonSplit <- strsplit(codon, split="")[[1]] #
    positionMutate <- which(codonSplit == from) #
    allMutated <- character(length(positionMutate))
    for (i in seq_along(positionMutate)) {
        mutated <- codonSplit
        mutated[positionMutate[i]] <- to
        mutated <- paste(mutated, sep="", collapse="")
        allMutated[i] <- mutated
    }
    return(allMutated)
}

translate <- function(codon) {
    return(codonVector[codon])
}

effectOfMutation <- function(codonBefore, from, to) {
    codonAfter <- mutate(codonBefore, from, to)
    aaBefore <- translate(codonBefore)[codonBefore]
    aaBefore <- as.character(aaBefore)
    aaAfter <- lapply(codonAfter, translate)#[codonAfter] #
    aaAfter <- as.character(aaAfter)
    mutationEffect <- data.frame(aaAfter, rownames=codonAfter)
    column <- paste(aaBefore, " (", as.character(codonBefore), ")", sep="", collapse="")
    #print(ncol(mutationEffect))
    colnames(mutationEffect) <- c(column, "Codon After")
    return(mutationEffect)
}

#CtoT <- function(codon) {
#    effect <- effectOfMutation(codon, "C", "T")
#    return(effect)
#}

#CtoA <- function(codon) {
#    effect <- effectOfMutation(codon, "C", "A")
#    return(effect)
#}

#CtoT_EffectTable <- CtoT(names(codonWithC)[1])
#for (i in seq_along(codonWithC[-1])) {
    #https://stackoverflow.com/questions/7739578/merge-data-frames-based-on-rownames-in-r
#    CtoT_EffectTable <- merge(CtoT_EffectTable, CtoT(names(codonWithC)[i]), all=TRUE) 
#}

outcomesOfMutation <- function(codonVector, from, to) {
    effectTable <- effectOfMutation(names(codonVector)[1], from, to)
    for (i in seq_along(codonVector[-1])) {
        #The use of merge() is inspired by https://stackoverflow.com/questions/7739578/merge-data-frames-based-on-rownames-in-r
        effectTable <- merge(effectTable, effectOfMutation(names(codonVector)[i], from, to), all=TRUE)
    }
    rownames(effectTable) <- effectTable[,"Codon After"]
    return(effectTable)
}

#The following nested for loops don't work to replace NA's as empty string. I'm not sure what's wrong yet.
for (aftermut in rownames(datf)) {
    for (beforemut in colnames(datf)) {
        if (is.na(datf[aftermut, beforemut])) {
            datf[aftermut, beforemut] <- ""
        }
    }
}

write.csv(outcomesOfMutation(codonWithC, "C", "T"), file="C_to_T_table.csv")
write.csv(outcomesOfMutation(codonWithC, "C", "A"), file="C_to_A_table.csv")
#And then I replaced all NA to empty in Excel. I don't know how to do this in R yet...
</source>
</div>
</div>

===6.1.3 Useful R functions===
;names(x): get the vector of names for named vector <code>x</code>

;attr(x, <which>): get or set special attributes of <code>x</code> (sort of like class methods?)

;str(x): internal structure of an arbitrary object <code>x</code>

;readLines(<path>): read lines from the file specified in <code><path</code> (<code>?readLines</code> says it reads from "connection"?)

;nchar(<string>): returns number of characters in the <code><string></code>

;table(<sequence>) returns a table of amino acid frequencies (<code><sequence></code> should be a vector of amino acid one-letter code strings)
:* Or in general, seems like the argument can be any vector, and it returns a named vector with non-repetitive elements of the argument vector as names and their frequencies as elements

{{Vspace}}
