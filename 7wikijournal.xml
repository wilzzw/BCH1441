=7 Protein-Protein Interactions=
==7.1 Graphs and Networks==

<div class="time-estimate">
Time estimated: 2 h; taken 195 min; date started: 2019-10-20; date completed: 2019-10-20

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:54, 21 October 2019 (EDT)
</div>

;Motivation: make biological inferences from relationship data

;Entities: genes, proteins, regulatory DNA etc. and their attributes (structure, function)

;Relationships: between entities, describe how the entities collaborate. Some attributes: direction, multiplicity

;Entities and relationships among them can be mapped into ''graphs''.

===7.1.1 Concepts in graph theory===
;Graph: a set of '''vertices''' and '''edges''' that relate them

;Tree: a connected graphs without cycles

;Directed acyclic graph (DAG): directed (edges with arrows/directions) but no directed cycles (may or may not have cycles?)

;Random graph: generated by random process
:* e.g. random geometric graph: probability of each edge depends on the geometric distance between the vertices

;Hypergraph: generalization of graphs. An edge can connect multiple vertices. [https://en.wikipedia.org/wiki/Hypergraph] [https://tex.stackexchange.com/questions/108064/typesetting-a-directed-hypergraph-in-tikz]

;Bipartite graph: a graph whose vertices can be divided into two ''independent'' sets U and V such that: 1) U & V = empty, and 2) every edge connects a vertex in U to one in V. [https://en.wikipedia.org/wiki/Bipartite_graph]
:* e.g. metabolic networks (U=metabolites, V=enzymes, edges=binding or catalyzed chemical reactions)
:* Check by ''distance parity''?

;Dual graph: G' is a dual graph of a planar graph G if: 1) G' has a vertex for each planar region of G, and 2) G' has an edge joining two neighboring regions defined by G
:* each of such edge of G' seems to be intersecting and edge of G, making 1-to-1 correspondence?
:* e.g. Voronoi diagram

;De Bruijn graph: directed, labeled, each edge connects nodes whose sequences overlap with one offset of one character

;Euler cycle: the cycle visits all edges and every edge exactly once (e.g. draw a graph in one continuous path without overlapping paths)

;Hamilton cycle: visits every vertex/node exactly once

;Degree of a node: number of edges the node has
:* If the graph is directed, can distinguish between "in-degree" and "out-degree"
:* degree centrality: contribution of degrees of nodes to the shape of the graph

;Scale-free network: one whose degree distribution follows: <math>P(k) \propto k^{-\gamma}</math> [https://en.wikipedia.org/wiki/Scale-free_network] [https://mathinsight.org/scale_free_network]
:* <math>\gamma</math> often between 2 and 3
:* It was realized that many biological networks, e.g. metabolic networks, are scale-free <ref>Jeong et al 2000</ref>

;Small-world network: distance D between two randomly chosen nodes scales with network size:
::: <math>D = a + b\log V</math>
(size of a graph/network can be represented by the number of edges E or nodes V)

===7.1.2 Analyzing biological networks: what to look for===
;set measures: size, degree distribution and statistics

;topological measures: shortest path, centrality, diameter, spanning trees, network flow ...
:* A '''path''' is a sequence of adjacent nodes. Two nodes are '''adjacent''' if they are connected by an edge
:* A '''shortest path''' between two nodes has the fewest nodes in the sequence
:* '''Betweeness centrality''': is high for nodes that lie between many other nodes (on the many shortest paths between nodes).
::: <math>C_{ij} = \sum_{{i}\neq{j}\neq{w}} \frac{\sigma_{ij}(w)}{\sigma_{ij}}</math>
:* The '''diameter''' of the graph is the longest shortest path of the graph

;graph motifs: distribution?

;graph clustering: clustering algorithms

;graph statistics: permutation, synthesis

;Computation of shortest paths:
:* '''Dijkstra’s algortihm''' for finding the shortest path between two specified nodes
:* '''Floyd-Warshall algorithm''' for finding all shortest paths between two specified nodes

;modules: within a module of a network, nodes are more connected to each other than to outside the module

===7.1.3 Working through FND-MAT-Graphs_and_networks.R===
<source lang="R">
install.packages("igraph")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
also installing the dependencies ‘magrittr’, ‘pkgconfig’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/magrittr_1.5.zip'
Content type 'application/zip' length 158082 bytes (154 KB)
downloaded 154 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/pkgconfig_2.0.3.zip'
Content type 'application/zip' length 22434 bytes (21 KB)
downloaded 21 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/igraph_1.2.4.1.zip'
Content type 'application/zip' length 9184159 bytes (8.8 MB)
downloaded 8.8 MB

package ‘magrittr’ successfully unpacked and MD5 sums checked
package ‘pkgconfig’ successfully unpacked and MD5 sums checked
package ‘igraph’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpiEOHW7\downloaded_packages
</code>
</div>
</div>

;Adjacency matrix A: Representation of a graph in computer
:* A V-by-V square matrix. For each pair of vertices i and j, <math>A_{ij}</math> = TRUE. Otherwise, FALSE.

;Useful functions:
:* '''igraph::degree()''': degree distribution of the graph
:* '''igraph::graph_from_adjacency_matrix()''': (can also set the mode to "directed" or "undirected")
:* '''igraph::layout_with_graphopt()'''
:* '''igraph::sample_pa()''': preferential attachment process for generating Barabasi-Albert graphs
:* '''igraph::sample_grg()''': process for generating random geometric graphs
:* '''igraph::sample_gnm()''': process for generating Erdos-Renyi graphs
:* '''igraph::sample_smallworld()''': process for generating Watts-Strogatz small-world graphs
:* '''igraph::E()''': edges
:* '''igraph::V()''': vertices
:* '''igraph::components()''': grouping components such that there are no paths to other components. Returns a named list of membership (the component index to which each node belong), csize (component sizes), and no (number of components)
:* '''igraph::diameter()''' & '''igraph::get_diameter()'''
:* '''igraph::centralize() & '''igraph::centr_betw()'''
:* '''igraph::cluster_infomap()''': clustering
:* '''igraph::modularity()''': how modular a clustering output makes the graph (how separated the modules are)
:* '''igraph::membership()''': based on the clustering argument, which cluster does each node belong to?

;Preferential attachment: one type of process that will yield scale-free distributions.

;(Line 288) Playing with power term: the larger the power, the fewer the hubs are, but the degree tend to be high and centralized around a few to a single node.

;<code>igraph::print.igraph(myG)</code>
 IGRAPH 30248e6 UN-- 20 20 -- 
 + attr: name (v/c)
 + edges from 30248e6 (vertex names):
 [1] Zlf4--Mdm8 Zlf4--Arb7 Zlf4--Tks4 Zlf4--Ztq6 Coj2--Tks4 Rzb7--Ikj6 Dyj4--Rdm3
 [8] Dyj4--Jpb5 Dyj4--Uwp1 Sgi7--Cop3 Rdm3--Msg1 Rdm3--Ikj6 Pwg1--Ikj6 Qae8--Ikj6
 [15] Mdm8--Dqa9 Arb7--Ikj6 Msg1--Ztq6 Jpb5--Uwp1 Tks4--Ikj6 Nek6--Ikj6

U stands for undirected, N stands for named nodes, the graph has 20 nodes and 20 edges

;<span style="color:red">(Line 586) Color doesn't seem to work for me...</span>

;High betweeness centrality seems to correlate with high degree of nodes. But strict relationship is not guaranteed.

;<span style="color:red">What does Line 595 do?</span>

{{Vspace}}
