<div class="b1">
Wilson's Journal
</div>

 '''MYSPE: ''Eremothecium cymbalariae'''''
 '''biCode(MYSPE): "ERECY"'''

{{Vspace}}

__TOC__

{{Vspace}}
=8 Gene Expression and Functional Bioinformatics=
==8.3 Differential Expression Analysis==

<div class="time-estimate">
Time estimated: 1.5 h; taken 1.5 h; date started: 2019-11-11; date completed: 2019-11-11

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 23:59, 11 November 2019 (EST)
</div>

Data come from high throughput methods.

;M/A plot:
M on the vertical axis and A on the horizontal axis. M is the log ratio of expression, and A is the average expression.
:* Consideration of whether a gene is '''significantly''' differentially expressed is probably affected by both (e.g. low A tends to be noisy).

GEO provides many tools for differential expression analysis

;Objective: Search for relevant information from GEO and identify significantly differentially expressed genes.

;Activity - Explore differential expression of Mbp1 and its target genes.

1. Go to NCBI GEO DataSets query page https://www.ncbi.nlm.nih.gov/gds/

2. Search the query ""cell cycle"[ti] AND "saccharomyces cerevisiae"[organism]". Filter the "Entry Type" to "DataSets"

3. There are 5 dataset entries. To follow the [http://steipe.biochemistry.utoronto.ca/abc/index.php/BIN-EXPR-DE#GEO2R instructions of the course], 
I will get the entry with Accession ID of GDS2347

4. The entry redirects to the DataSet Browser page https://www.ncbi.nlm.nih.gov/sites/GDSbrowser?acc=GDS2347

5. See a table. There is a link to the "Reference Series", whose Accession ID is GSE3635. Go to this cross-referenced GEO Series https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE3635.

6. There are descriptions of experimental design and sample information, with the relevant citation.

Samples are taken at time points throughout the cell cycle. Cells were (obviously) synchronized a priori.

7. Do "Analyze with GEO2R" (https://www.ncbi.nlm.nih.gov/geo/geo2r/?acc=GSE3635)

8. Define groups and assign samples to groups. Since the samples span two cell cycles (2x 60 min) at 10 min intervals. I will make 5 groups, each consisting of the same amount of time into the beginning of cell cycle.

 T0: 0 min & 60 min, N=2
 T1: 10 min & 70 min, N=2
 T2: 20 min & 80 min, N=2
 T3: 30 min & 90 min, N=2
 T4: 40 min & 100 min, N=2
 T5: 50 min & 110 min, N=2
 (Leave out 130 min sample)

9. From the tab "Value Distribution", the expression distribution of samples are more or less unbiased:

[[File:expr_boxplt.jpg|300px]]

10. Under "GEO2R", look at "Top 250".

 Many of the top hits are histone proteins and DNA replication machineries. They are expected to be differentially expressed throughout cell cycle.

 MBP1 is not one of the top 250 hits! Swi6 is but not one of the top hits among top 250.

<span style="color:red">The website is incredibly bad imo... Takes way too long than reasonable to display drop-down for each entry expression profile.</span>

 The algorithm finds genes that have high inter-group variances and low intra-group variances. It does not assume group-dependent patterns of expression.

11. Re-group the samples:

 A: 0 min, 10 min, 60 min, 70 min, N=4 (in between cell cycles)
 B: 30 min, 40 min, 90 min, 100 min, N=4 (in the middle of cell cycles)

Results are expected to change.

 Out of DSE1, DSE2, ERF3, HTA2, HTB2, and GAS3, only HTA2, HTB2, and GAS3 are in the top 250. MBP1 appears in top 250 while SWI6 is gone.

12. Search the query "(Mbp1 OR Swi6 OR Swi4 OR Nrm1 OR Cln1 OR Clb6 OR Act1 OR Alg9) AND GSE3635" in GEO Profiles.

13. Go to [https://www.ncbi.nlm.nih.gov/geo/tools/profileGraph.cgi?ID=GDS2347:YDL056W entry of MBP1]. The graphical view of expression over time is more apparently cyclic. Can probably fit with a sine curve or calculate time-correlation.

14. R-scripts used for analysis is available for GEO2R


==8.2 The Gene Expression Omnibus (GEO) database==

<div class="time-estimate">
Time estimated: 1.5 h; taken 1.5 h; date started: 2019-11-11; date completed: 2019-11-11

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 17:43, 11 November 2019 (EST)
</div>

Overview of GEO database: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4944384/

;Retrieving GEO record:
GEO Accession Number
:* Types: Series (GSExxx), Sample (GSMxxx), Platform (GPLxxx) and DataSet (GDSxxx)

<span style="color:red">Key things to know for this session are these entry types</span>

Keyword search among databases
:* GEO DataSets: search for studies of interest. Entries/records commonly have Organism, Experiment Type & Design.
:* GEO Profiles: search for expression profile of genes

;Activity 1 - Give GEO Profiles a Try with MBP1
1. Search NCBI - GEO Profiles with the query "Mbp1 AND (Saccharomyces cerevisiae[Organism])"

2. Entries are annotated with GPLxxx platforms, GDSxxx datasets, dataset type, SGD ID for the protein YDL056W, and name "MBP1".
There is also a thumbnail clickable showing expression levels in all samples with graphics. Curated?

;GEO-BLAST:
Database contains all sequences from Microarrays participating in GEO DataSet from GenBank?

;GEO DataSet:
:* Can find info of other genes in this DataSet
:* Can compare 2 sets of samples with statistical tests
:* Can cluster heatmaps
:* Protocol and distribution of values of samples are viewable

;GEO Profile:
I use https://www.ncbi.nlm.nih.gov/geoprofiles/16205984 as an example of GEO profile to inspect.
:* Can find profile neighbours, aka get profiles of genes of similar expression pattern '''within the same DataSet''' (based on Pearson corr. coeff. but it would be nice if the coeff. are displayed..)
:* Can find up-to-20 chromosome neighbours in the same DataSet
:* Other neighbours: Sequence neighbours (based on BLAST seq. similarity), homologene neighbours (from the same HomoloGene group)
:* Find pathway/cluster though "Pathways + GO"? <span style="color:red">I didn't see a "Find Pathways" button.. </span>

;GEO2R:
Analysis and visualization tools. Can be found in accession display for a GEO entry. Based on R-language.

;Genome Data Viewer:
Visualization.. Zoom in and zoom out?

;Downloads:
Often from GEO Series. Downloadable formats:
:* SOFT (Simple Omnibus Format in Text): plain-text
:* MINiML (MIAME Notation in Markup Language): XML
:* Series Matrix File(s): ?

==8.1 Analysis of Gene Expression==

<div class="time-estimate">
Time estimated: 0.5 h; taken 20 min; date started: 2019-11-11; date completed: 2019-11-11

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 17:43, 11 November 2019 (EST)
</div>

;Experiment:
1. Microarrays: Detect mRNA levels by probes on a chip

2. RNA Sequencing: More direct and more prevalent nowadays. Align fragments to reference genome. However, converting reads of mRNA fragments to counts require "stochastic weighting".
: In addition, alignment to the reference genome should be "splice-aware" 

;Types of data files/formats:
:* SAM (sequence alignment map) & BAM (binary SAM) files: mapping of reads to the genome
:* BED files: specifies regions of interest in SAM/BAM. Extensive annotation and subsetting.

;Conversion of reads to counts:
e.g. RPKM, FPKM

;Expression databases:
:* GEO (NCBI): microarray and RNA-seq expression data
:* Expression Atlas (EMBL-EBI)

;Key questions:
Expressions and differential expressions of genes

{{Vspace}}
=7 Protein-Protein Interactions=
==7.1 Graphs and Networks==

<div class="time-estimate">
Time estimated: 2 h; taken 195 min; date started: 2019-10-20; date completed: 2019-10-20

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:54, 21 October 2019 (EDT)
</div>

;Motivation: make biological inferences from relationship data

;Entities: genes, proteins, regulatory DNA etc. and their attributes (structure, function)

;Relationships: between entities, describe how the entities collaborate. Some attributes: direction, multiplicity

;Entities and relationships among them can be mapped into ''graphs''.

===7.1.1 Concepts in graph theory===
;Graph: a set of '''vertices''' and '''edges''' that relate them

;Tree: a connected graphs without cycles

;Directed acyclic graph (DAG): directed (edges with arrows/directions) but no directed cycles (may or may not have cycles?)

;Random graph: generated by random process
:* e.g. random geometric graph: probability of each edge depends on the geometric distance between the vertices

;Hypergraph: generalization of graphs. An edge can connect multiple vertices. [https://en.wikipedia.org/wiki/Hypergraph] [https://tex.stackexchange.com/questions/108064/typesetting-a-directed-hypergraph-in-tikz]

;Bipartite graph: a graph whose vertices can be divided into two ''independent'' sets U and V such that: 1) U & V = empty, and 2) every edge connects a vertex in U to one in V. [https://en.wikipedia.org/wiki/Bipartite_graph]
:* e.g. metabolic networks (U=metabolites, V=enzymes, edges=binding or catalyzed chemical reactions)
:* Check by ''distance parity''?

;Dual graph: G' is a dual graph of a planar graph G if: 1) G' has a vertex for each planar region of G, and 2) G' has an edge joining two neighboring regions defined by G
:* each of such edge of G' seems to be intersecting and edge of G, making 1-to-1 correspondence?
:* e.g. Voronoi diagram

;De Bruijn graph: directed, labeled, each edge connects nodes whose sequences overlap with one offset of one character

;Euler cycle: the cycle visits all edges and every edge exactly once (e.g. draw a graph in one continuous path without overlapping paths)

;Hamilton cycle: visits every vertex/node exactly once

;Degree of a node: number of edges the node has
:* If the graph is directed, can distinguish between "in-degree" and "out-degree"
:* degree centrality: contribution of degrees of nodes to the shape of the graph

;Scale-free network: one whose degree distribution follows: <math>P(k) \propto k^{-\gamma}</math> [https://en.wikipedia.org/wiki/Scale-free_network] [https://mathinsight.org/scale_free_network]
:* <math>\gamma</math> often between 2 and 3
:* It was realized that many biological networks, e.g. metabolic networks, are scale-free <ref>Jeong et al 2000</ref>

;Small-world network: distance D between two randomly chosen nodes scales with network size:
::: <math>D = a + b\log V</math>
(size of a graph/network can be represented by the number of edges E or nodes V)

===7.1.2 Analyzing biological networks: what to look for===
;set measures: size, degree distribution and statistics

;topological measures: shortest path, centrality, diameter, spanning trees, network flow ...
:* A '''path''' is a sequence of adjacent nodes. Two nodes are '''adjacent''' if they are connected by an edge
:* A '''shortest path''' between two nodes has the fewest nodes in the sequence
:* '''Betweeness centrality''': is high for nodes that lie between many other nodes (on the many shortest paths between nodes).
::: <math>C_{ij} = \sum_{{i}\neq{j}\neq{w}} \frac{\sigma_{ij}(w)}{\sigma_{ij}}</math>
:* The '''diameter''' of the graph is the longest shortest path of the graph

;graph motifs: distribution?

;graph clustering: clustering algorithms

;graph statistics: permutation, synthesis

;Computation of shortest paths:
:* '''Dijkstra’s algortihm''' for finding the shortest path between two specified nodes
:* '''Floyd-Warshall algorithm''' for finding all shortest paths between two specified nodes

;modules: within a module of a network, nodes are more connected to each other than to outside the module

===7.1.3 Working through FND-MAT-Graphs_and_networks.R===
<source lang="R">
install.packages("igraph")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
also installing the dependencies ‘magrittr’, ‘pkgconfig’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/magrittr_1.5.zip'
Content type 'application/zip' length 158082 bytes (154 KB)
downloaded 154 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/pkgconfig_2.0.3.zip'
Content type 'application/zip' length 22434 bytes (21 KB)
downloaded 21 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/igraph_1.2.4.1.zip'
Content type 'application/zip' length 9184159 bytes (8.8 MB)
downloaded 8.8 MB

package ‘magrittr’ successfully unpacked and MD5 sums checked
package ‘pkgconfig’ successfully unpacked and MD5 sums checked
package ‘igraph’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpiEOHW7\downloaded_packages
</code>
</div>
</div>

;Adjacency matrix A: Representation of a graph in computer
:* A V-by-V square matrix. For each pair of vertices i and j, <math>A_{ij}</math> = TRUE. Otherwise, FALSE.

;Useful functions:
:* '''igraph::degree()''': degree distribution of the graph
:* '''igraph::graph_from_adjacency_matrix()''': (can also set the mode to "directed" or "undirected")
:* '''igraph::layout_with_graphopt()'''
:* '''igraph::sample_pa()''': preferential attachment process for generating Barabasi-Albert graphs
:* '''igraph::sample_grg()''': process for generating random geometric graphs
:* '''igraph::sample_gnm()''': process for generating Erdos-Renyi graphs
:* '''igraph::sample_smallworld()''': process for generating Watts-Strogatz small-world graphs
:* '''igraph::E()''': edges
:* '''igraph::V()''': vertices
:* '''igraph::components()''': grouping components such that there are no paths to other components. Returns a named list of membership (the component index to which each node belong), csize (component sizes), and no (number of components)
:* '''igraph::diameter()''' & '''igraph::get_diameter()'''
:* '''igraph::centralize() & '''igraph::centr_betw()'''
:* '''igraph::cluster_infomap()''': clustering
:* '''igraph::modularity()''': how modular a clustering output makes the graph (how separated the modules are)
:* '''igraph::membership()''': based on the clustering argument, which cluster does each node belong to?

;Preferential attachment: one type of process that will yield scale-free distributions.

;(Line 288) Playing with power term: the larger the power, the fewer the hubs are, but the degree tend to be high and centralized around a few to a single node.

;<code>igraph::print.igraph(myG)</code>
 IGRAPH 30248e6 UN-- 20 20 -- 
 + attr: name (v/c)
 + edges from 30248e6 (vertex names):
 [1] Zlf4--Mdm8 Zlf4--Arb7 Zlf4--Tks4 Zlf4--Ztq6 Coj2--Tks4 Rzb7--Ikj6 Dyj4--Rdm3
 [8] Dyj4--Jpb5 Dyj4--Uwp1 Sgi7--Cop3 Rdm3--Msg1 Rdm3--Ikj6 Pwg1--Ikj6 Qae8--Ikj6
 [15] Mdm8--Dqa9 Arb7--Ikj6 Msg1--Ztq6 Jpb5--Uwp1 Tks4--Ikj6 Nek6--Ikj6

U stands for undirected, N stands for named nodes, the graph has 20 nodes and 20 edges

;<span style="color:red">(Line 586) Color doesn't seem to work for me...</span>

;High betweeness centrality seems to correlate with high degree of nodes. But strict relationship is not guaranteed.

;<span style="color:red">What does Line 595 do?</span>

{{Vspace}}
=6 Genes and Genome=
==6.2 Genetic Code Optimality==
;Objective: Do a computational experiment outlined in RPR-Genetic_code_optimality.R to study how nature arrived at the universal genetic code

<div class="time-estimate">
Time estimated: 1 h; taken 85 min; date started: 2019-10-28; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 12:56, 28 October 2019 (EDT)
</div>

Line 99-131: Functions defined to generate alternative genetic codes.

;Activity 1 - Explore the effect of mutations on a sequence if alternative genetic code were used.

;Plan: "Reverse-translate" a protein sequence Mbp1 into a nucleotide sequence, make mutations, and translate it back.
:* Observe: See whether different genetic codes differ in mutation severity.

Methodologies defined into functions.

Line 218-220: To determine severity of mutation, first group amino acids into biophysical categories (hydrophobic, hydrophilic, neutral)

Line 222-226: Give different types of mutations penalty scores (e.g. nonsense mutation has the highest penalty).

Define a function to evaluate mutation severity based on the penalty scores.

Line 268:
<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
Warning messages for: <code>myDNA <- readLines("./data/S288C_YDL056W_MBP1_coding.fsa")[-1]</code>
<div class="mw-collapsible-content">
<code>
Warning message:
In readLines("./data/S288C_YDL056W_MBP1_coding.fsa") :

incomplete final line found on './data/S288C_YDL056W_MBP1_coding.fsa'
</code>
</div>
</div>

(I feel like I have seen this warning message somewhere when reading from file in another learning unit. Basically it's better to end with something like '\n'? A good practice to end..)

Run a number of random trials of mutation experiments and histogram the resulting mutation penalties.

Run the same experiment using an alternative set of genetic code. Compare the histograms.

Conclusion: Histograms suggest the mutations have greater risky impact for the alternative genetic code than the standard genetic code used by nature.

[[File:Std_vs_synth_genCode.png|500px]]

;Activity 2 - Run the same experiment for amino acid-swapped genetic code

R-code below for running such experiment
<source lang="R">
N <- 200
valSWGC <- numeric(N)

set.seed(112358)
for (i in 1:N) {
    swGC <- swappedGC(stdCode)
    x <- traRev(myAA, swGC)
    x <- randMut(x)
    x <- traFor(x, swGC)
    valSWGC[i] <- evalMut(myAA, x)
}
set.seed(NULL)

#Optionally recover the histogram for standard genetic code
hist(valSTDC,
     breaks = 15,
     col = "palegoldenrod",
     xlim = c(0, 400),
     ylim = c(0, N/4),
     main = "Standard vs. Swapped Genetic Code",
     xlab = "Mutation penalty")

hist(valSWGC,
     col = "plum",
     breaks = 60,
     add = TRUE)
</source>

;Conclusion: Overall alternative genetic code generated by swapping encoding amino acids produce more severe mutations than standard genetic code.

: Seems not as bad as a randomly generated genetic code in the previous example though.

[[File:Std_vs_swapped_genCode.png|500px]]

==6.1 Genetic Code==
;Objective: Use R and the package Biostrings to work with genetic code

<div class="time-estimate">
Time estimated: 1 h; taken > 3h; date started: 2019-10-15; date completed: 2019-10-16

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:59, 16 October 2019 (EDT)
</div>

===6.1.1 Preparation: FND-Genetic_code.R===

;Install BiocManager
<source lang="R">
install.packages("BiocManager")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/BiocManager_1.30.7.zip'
Content type 'application/zip' length 97999 bytes (95 KB)
downloaded 95 KB

package ‘BiocManager’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpumGMrj\downloaded_packages
</code>
</div>
</div>


;Install Biostrings
<source lang="R">
BiocManager::install("Biostrings")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
Bioconductor version 3.9 (BiocManager 1.30.7), R 3.6.1 (2019-07-05)
Installing package(s) 'BiocVersion', 'Biostrings'
also installing the dependencies ‘zlibbioc’, ‘BiocGenerics’, ‘S4Vectors’, ‘IRanges’, ‘XVector’

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/zlibbioc_1.30.0.zip'
Content type 'application/zip' length 374970 bytes (366 KB)
downloaded 366 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/BiocGenerics_0.30.0.zip'
Content type 'application/zip' length 736201 bytes (718 KB)
downloaded 718 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/S4Vectors_0.22.1.zip'
Content type 'application/zip' length 2035683 bytes (1.9 MB)
downloaded 1.9 MB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/IRanges_2.18.3.zip'
Content type 'application/zip' length 2379794 bytes (2.3 MB)
downloaded 2.3 MB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/XVector_0.24.0.zip'
Content type 'application/zip' length 714038 bytes (697 KB)
downloaded 697 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/BiocVersion_3.9.0.zip'
Content type 'application/zip' length 8915 bytes
downloaded 8915 bytes

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/Biostrings_2.52.0.zip'
Content type 'application/zip' length 14372143 bytes (13.7 MB)
downloaded 13.7 MB

package ‘zlibbioc’ successfully unpacked and MD5 sums checked
package ‘BiocGenerics’ successfully unpacked and MD5 sums checked
package ‘S4Vectors’ successfully unpacked and MD5 sums checked
package ‘IRanges’ successfully unpacked and MD5 sums checked
package ‘XVector’ successfully unpacked and MD5 sums checked
package ‘BiocVersion’ successfully unpacked and MD5 sums checked
package ‘Biostrings’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpumGMrj\downloaded_packages
installation path not writeable, unable to update packages: boot, foreign,
  KernSmooth, mgcv, nlme
</code>
</div>
</div>

===6.1.2 Running through FND-Genetic_code.R===

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">

    
<div class="mw-collapsible-content">
<source lang="R">
#setwd("C:/Users/Wilson/Documents/BCH1441/ABC-units")
#source("FND-Genetic_code.R")

# Task: What do you need to change to print the table with U instead
#         of T? Try it.
for (i in seq_along(dim(cCube))) {
    dimnames(cCube)[[i]][4] <- "U"
}

# Task: Point mutations are more often transitions (purine -> purine;
#         pyrimidine -> pyrimidine) than transversions (purine -> pyrimidine;
#         pyrimidine -> purine), even though twice as many transversions
#         are possible in the code. This is most likely due a deamination /
#         tautomerization process that favours C -> T changes. If the code
#         indeed minimizes the effect of mutations, you would expect that
#         codons that differ by a transition code for more similar amino acids
#         than codons that differ by a transversion. Is that true? List the set
#         of all amino acid pairs that are encoded by codons with a C -> T
#         transition. Then list the set of amino acid pairs with a C -> A
#         transversion. Which set of pairs is more similar?

#I'm not sure whether I understand this question correctly but:
#All of them that contain "C"
codonWithC <- genCode[grep("C", names(genCode))]
codonVector <- genCode[1:length(genCode)] #For some reason...
#codonVector <- as.vector(genCode) #For some reason...
#names(codonVector) <- names(genCode)
#dictWith1C <- dictWithC[-grep("CC", names(dictWithC))]

mutate <- function(codon, from, to) {
    codonSplit <- strsplit(codon, split="")[[1]] #
    positionMutate <- which(codonSplit == from) #
    allMutated <- character(length(positionMutate))
    for (i in seq_along(positionMutate)) {
        mutated <- codonSplit
        mutated[positionMutate[i]] <- to
        mutated <- paste(mutated, sep="", collapse="")
        allMutated[i] <- mutated
    }
    return(allMutated)
}

translate <- function(codon) {
    return(codonVector[codon])
}

effectOfMutation <- function(codonBefore, from, to) {
    codonAfter <- mutate(codonBefore, from, to)
    aaBefore <- translate(codonBefore)[codonBefore]
    aaBefore <- as.character(aaBefore)
    aaAfter <- lapply(codonAfter, translate)#[codonAfter] #
    aaAfter <- as.character(aaAfter)
    mutationEffect <- data.frame(aaAfter, rownames=codonAfter)
    column <- paste(aaBefore, " (", as.character(codonBefore), ")", sep="", collapse="")
    #print(ncol(mutationEffect))
    colnames(mutationEffect) <- c(column, "Codon After")
    return(mutationEffect)
}

#CtoT <- function(codon) {
#    effect <- effectOfMutation(codon, "C", "T")
#    return(effect)
#}

#CtoA <- function(codon) {
#    effect <- effectOfMutation(codon, "C", "A")
#    return(effect)
#}

#CtoT_EffectTable <- CtoT(names(codonWithC)[1])
#for (i in seq_along(codonWithC[-1])) {
    #https://stackoverflow.com/questions/7739578/merge-data-frames-based-on-rownames-in-r
#    CtoT_EffectTable <- merge(CtoT_EffectTable, CtoT(names(codonWithC)[i]), all=TRUE) 
#}

outcomesOfMutation <- function(codonVector, from, to) {
    effectTable <- effectOfMutation(names(codonVector)[1], from, to)
    for (i in seq_along(codonVector[-1])) {
        #The use of merge() is inspired by https://stackoverflow.com/questions/7739578/merge-data-frames-based-on-rownames-in-r
        effectTable <- merge(effectTable, effectOfMutation(names(codonVector)[i], from, to), all=TRUE)
    }
    rownames(effectTable) <- effectTable[,"Codon After"]
    return(effectTable)
}

#The following nested for loops don't work to replace NA's as empty string. I'm not sure what's wrong yet.
for (aftermut in rownames(datf)) {
    for (beforemut in colnames(datf)) {
        if (is.na(datf[aftermut, beforemut])) {
            datf[aftermut, beforemut] <- ""
        }
    }
}

write.csv(outcomesOfMutation(codonWithC, "C", "T"), file="C_to_T_table.csv")
write.csv(outcomesOfMutation(codonWithC, "C", "A"), file="C_to_A_table.csv")
#And then I replaced all NA to empty in Excel. I don't know how to do this in R yet...
</source>
</div>
</div>

===6.1.3 Useful R functions===
;names(x): get the vector of names for named vector <code>x</code>

;attr(x, <which>): get or set special attributes of <code>x</code> (sort of like class methods?)

;str(x): internal structure of an arbitrary object <code>x</code>

;readLines(<path>): read lines from the file specified in <code><path</code> (<code>?readLines</code> says it reads from "connection"?)

;nchar(<string>): returns number of characters in the <code><string></code>

;table(<sequence>) returns a table of amino acid frequencies (<code><sequence></code> should be a vector of amino acid one-letter code strings)
:* Or in general, seems like the argument can be any vector, and it returns a named vector with non-repetitive elements of the argument vector as names and their frequencies as elements

{{Vspace}}
=5 Structural Bioinformatics=
==5.7 Protein Structural Domains==

<div class="time-estimate">
Time estimated: 2 h; taken 2.5 h; date started: 2019-10-30; date completed: 2019-10-31

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 23:45, 31 October 2019 (EDT)
</div>

;Domains:
Compact, somewhat independent, efficient folding, modular protein organization
:* ''Often'' domains have distinct functions
:* Useful for identifying folding units, understanding evolutionary history, predicting protein function, classifying proteins

;Larger proteins tend to have more than 1 domains.
:* Sizes of domains average to about 100 residues long

;Identification of domains depends on the explicit definition being used:
:* sequence domain: sequence inheritance
:* functional domain: modularized functional units
:* structural domain: based on atomic contacts (e.g. contact maps - hierarchial structural units of protein. may see subdomains)

===5.7.1 Domain databases===
;CATH:
Hierarchial classification of domains based off PDB. Mostly automated
:* Divide proteins into domains by: DETECTIVE, DOMAK, PUU
:* Manually curate and resolve conflicts arised from 3 streams of domain divisions (drawback: does not scale well this way..)
:* Classify domains into classes, homology, topology and architecture by: CATHEDRAL and SSAP

* '''DOMAK''': algorithm splits protein into units such that it max. intra-unit contacts and min. inter-unit-contacts
* '''DETECTIVE''': algorithm finds recognizable hydrophobic cores and with their shells to constitute domains
* '''PUU''': algorithm max. intra-unit contacts and min. inter-unit-contacts by building a "folding tree"

* '''CATHEDRAL''': fast prescreening domains against a database (based on secondary structure elements?)
* '''SSAP''': gives accurate structural alignment for domains

'''Domain swapping''' complicates issue..

Another related classification - protein families/superfamilies

However, boundaries between families are not always obvious, 
and within family might be non-homologous sequences due to convergent evolution.

;CDD (Conserved Domain Database):
Integrated domain database tool by NCBI. Combining structural domains from CATH and SCOP (discontinued), and sequence domains from Pfam.
:* Sequences are cross-referenced in many sequence databases.
:* ?Are structural domains cross-referenced as well?

PDB cross-references all of CATH, SCOP, Pfam.

;Activity 1 - Explore CATH database with Mbp1 protein
1. Go to http://www.cathdb.info/ and search "1BM8"

2. There are matching CATH superfamilies, domains, and PDB references.

3. The '''CATH ID''' (hierarchial) is 3.10.260.10

4. On the top, "Browse"

5. Under CATH classification, the protein (domain) is Alpha Beta-Roll

6. Under "3.10 Roll", there are lots of different topologies. Each one has a representative fold that can be clicked, and viewed to the left.

7. Each 3rd level group (topology group) pretty much consist of a non-homologous group. 3.10.260 points to Mlu1-box binding protein -- DNA binding domain

8 The 4th level groups the same topology group into different homology groups. e.g. 3.10.260.10 points to Transcription regulator HTH, APSES-type DNA-binding domain

9. On the left you can "Go to Superfamily". I guess at the homology level would be what we call "superfamily"? There are useful tools in the link.

;Activity 2 - Explore CDD with Mbp1_ERECY
1. Go to the [https://www.ncbi.nlm.nih.gov/protein/XP_003645298.1?report=genbank&log$=protalign&blast_rank=1&RID=UT6SVB5U014 NCBI entry for Mbp1_ERECY]

2. On the right, "CDD Search Results"

3. For each entry/accession of domain annotation, can link to the domain entry with description, statistics, and protein sequence alignments

4. "Search for similar domain architectures" redirects to CDART. Supposedly a very useful tool.

===5.7.2 Domain boundaries===
;Objective:
Explore the fluid definitions of domain boundaries.

;Activity - Explore domain boundaries of APSES and KilA-N in 1BM8 PDB structure.
1. <code>open 1bm8</code> and use "Interactive 1" preset to view as ribbons in rainbow colours.

2. Go to '''InterPro''' (EBI's tool) at http://www.ebi.ac.uk/interpro/ and search "P39678" by text.

3. Under "Domain" and "Repeat", aligned to the N-terminus I can find IPR003163 (5-111), IPR018004 (22-88), PF04383 (23-88), and additionally SM01252 (22-105)
:* ?What is SMART domain?

4. The domains are not quite clickable, but they do seem to describe the same protein, albeit somewhat different boundaries.

5. If I were to use NCBI to identify conserved domains for S. cerevisiae Mbp1, I get a slightly different definition for the N-terminal domain annotation "KilA-N" as 19-93

'''Even though the annotation ID is also Pfam PF04383, it is different from what I get from EBI!'''

6. In Chimera, colour the whole chain white. Then, colour the protein in terms of different domain definitions

Resulting picture:

[[File:domain_boundaries.png|500px]]
* Yellow - IPR003163 (5-111)
* Orange - PF04383 (19-93)
* Red - PF04383 (23-88)

It becomes apparent that the latter two definitions are missing out a helix and a anti-parallel beta-hairpin.

If you ask me, I think this is a big deal because the helix looks like a part of a helix-turn-helix in the structure,

and the beta-hairpin stacks along another beta-sheet common in three definitions.

'''I would certainly expect inclusion of those segments affect the folding of this unit!'''

7. Hide all ribbons. Show Atoms/bonds for the protein. Change the radius of bonds to 0.4 under Inspect > Bonds menu bottom right.

8. "Tools" > "Surface/Binding Analysis" > "FindHbond" with Line width set to 5.0

Most of the hydrogen bonds are formed involving backbones. In particular, the aforementioned beta-sheet components has all three colours participating:

[[File:bb_hb.jpg|500px]]

Backbone to backbone hydrogen bonds reveal that a series of anti-parallel beta-sheets (left side of the structure image) that are incomplete in orange and red definitions.

[[File:sc_hb.jpg|500px]]

There are barely any sidechain-sidechain hydrogen bonds. Alpha carbons are artificially joined by long bond-like representations.

;Conclusion:
'''Do not blindly trust any domain boundary definition! They are rather arbitrary. Inspect structure if available.'''

==5.6 Molecular Forcefields==

<div class="time-estimate">
Time estimated: 15 min; taken 10 min; date started: 2019-10-25; date completed: 2019-10-25

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:37, 26 October 2019 (EDT)
</div>

;To calculate the energy of a biomolecule at a specific conformation

;Molecular Mechanics Forcefields:
:* e.g. GROMOS, CHARMM, AMBER etc.
:* classical treatment of interactions specified by bonds, angles, dihedrals, vdW, Coulombic
:* Entropy not directly accounted for

;Empirical (Statistical) Forcefields:
:* Energy: related to inversed Boltzmann of frequencies of observed states

==5.5 PDB File Analysis==

<div class="time-estimate">
Time estimated: 2 h; taken 110 min; date started: 2019-10-24; date completed: 2019-10-25

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:07, 25 October 2019 (EDT)
</div>

;Objective: Analyze .pdb files in R

;Useful functions:
:* abline(): add straight lines to a plot
:* densCols(<vector>): produce a vector of colours used for smooth density contour plots
:* smoothScatter(): scatter plots with smooth density contour plots
:* MASS::kde2d(): create a 2D [https://en.wikipedia.org/wiki/Kernel_density_estimation kernel density estimation] (for contour plots)
:* contour()
:* filled.contour()
:* persp(): perspective plot (wired surface)
:* par()
:* layout(): set complex plot layout arrangements
:* bio3d::read.pdb(<path>): returns a named list of information retrieved from pdb file specified by <path>
:* bio3d::pdbseq(<pdb_object>): get a named vector of one-letter-code sequence from pdb. Names are the corresponding residue numbers
:* bio3d::torsion.pdb(<pdb_object>): returns a named list of all kinds of torsion angle information
:* bio3d::aa321() & bio3d::aa123(): interconversion between 3-letter and 1-letter codes of amino acids
:* bio3d::plot.bio3d(): modified plotting function with specific handy pdb functionalities (e.g. plot B-factor along sequence)
:* bio3d::dssp()
:* bio3d::dist.xyz(A,B): distance between coordinates represented in A and B. A and B are vectors with 3N elements. Each are grouped in consecutive 3 as coord. Returns matrix of pairwise distances.

===5.5.1 Working through RPR-SX-PDB.R===
;Install bio3d and hexbin
<source lang="R">
install.packages(c("bio3d", "hexbin"))
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing packages into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/bio3d_2.3-4.zip'
Content type 'application/zip' length 3640992 bytes (3.5 MB)
downloaded 3.5 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/hexbin_1.27.3.zip'
Content type 'application/zip' length 931691 bytes (909 KB)
downloaded 909 KB

package ‘bio3d’ successfully unpacked and MD5 sums checked
package ‘hexbin’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpwP9hs6\downloaded_packages
</code>
</div>
</div>

;Activity 1 - Examine plain-text 1BM8.pdb
:* Resolution: 1.71 Å

:* The first residue in SEQRES is the same as in ATOM

:* There are 83 water molecules (weird that the residue number is not continuous?!)

:* N-terminal and C-terminal are missing some hydrogens

Line 131-136: implicit sequence == explicit sequence for 1BM8.pdb

;Activity 2 - Ramanchandran plot analysis

Line 210: These are the lines showing residues that are in the outlying left-handed helix region
     eleno elety resid chain resno      phi      psi
 84     84    CA   SER     A    11 52.88084 36.95115
 293   293    CA   ASP     A    32 65.77463 14.94939
 406   406    CA   ASN     A    44 69.84793 27.66016
 887   887    CA   SER     A    91 44.70111 54.55245

Check these residues in Chimera: Command: <code>display :11,32,44,91</code>

Turns out these residues are in the loop/turn regions.

;Activity 3 - Density plots
Line 247:
<code>iNA <- c(which(is.na(tor$phi)), which(is.na(tor$psi)))</code>

iNA has indices for which phi or psi is not defined, such as the first and the last protein residues and water.

;Activity 4 - Check for cis-peptide bonds
Line 407-409:
The peptide bond is expected to be planar (0 or 180 degrees in dihedral angle). Dihedral angles are defined from -180 to 180 degrees. So those seemingly "jumping" values are actually quite close.

It can be fixed (Line 410-411).

;Activity 5 - Explore analysis of hydrogen bonds
Line 772:
Without importing bio3d with library(), this line should be <code>pdb <- bio3d::read.pdb(myPDBs[i])</code>

Line 792: why is it equal sign??

Line 817-819: Why do you think these distributions are different?

Distribution of HB distance for alpha helices is more spread out and average at a longer distance.

Distribution of HB distance for beta sheets is more concentrated around a smaller distance with tailing towards a larger distance.

: Perhaps the preferred geometry/angle of the hydrogen bonds are different for sheets versus for helices?

At what distance do you think H-bonds have the lowest energy?

: The distance with the highest frequency. For alpha-helices it would be 3.4 Å, while for beta-sheets it would be 2.8 Å.

==5.4 Small Molecules==

<div class="time-estimate">
Time estimated: 2 h; taken 80 min; date started: 2019-10-24; date completed: 2019-10-24

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:23, 24 October 2019 (EDT)
</div>

;PDB has its own chemical database: Chemical Component Dictionary

;Access:
:* PDBeChem (EBI)
:* Ligand Expo (PDB)

;SMILE (Simplified molecular-input line-entry system) string: PDB "search by ligand" converts the chemical structure to a '''SMILE string''' that can be used to generate coordinates in Chimera.

===5.4.1 Explore caffeine through various databases===
;Activity 1 - Explore on DrugBank
: Downloadable items include PDB, SMILES, MOL, SDF, 3D-SDF, InChI

;Activity 2 - Explore on PubChem (NCBI) and search by drawing a structure
1. '''Structure search has moved. Click "Draw Structure"'''

2. Search for this structure:

[[File:caffeine_chemstruc.png|200px]]

3. The only result is "Caffeine". PubChemCID = 2519

 The SMILE string is CN1C=NC2=C1C(=O)N(C(=O)N2C)C

===5.4.2 Build the structure from SMILE===
;Activity 3 - Build structure in Chimera
1. Tools > Structure Editing > Build Structure

2. Use the SMILE string to build

3. Actions > Color > by element

[[File:caffeine_chimera.png|200px]]

4. Actions > Surface > show

5. Select the surface, then selection inspector, inspect MSMS surface and change vertex density to 50.0

6. Actions > Color > all options > cornflower blue (apply to surfaces only)

7. Actions > Surface > Transparency > 50%

8. Result in wall-eyed stereo view:

[[File:caffeine_stereo.png|400px]]

9. (3D stereo view practice)

===5.4.3 Superposition of small molecule into complex===
1. Chimera "open 3g6m"

2. Hide protein ribbons and atoms/bonds (there are 2 caffeine molecules in the complex!)

3. Hide one caffeine molecule from the complex <code>~display #1:1</code>

4. Inspect atom notations, here's the command in Chimera I use: <code>match #0@N3,C6,N4,C3,C4,C5,N1,C2,N2,C8,O2,C7,O1,C1 #1:427@N1,C2,N3,C4,C5,C6,N7,C8,N9,C10,O11,C12,O13,C14</code>

Before Matching...

[[File:before_matching.png|500px]]

After Matching...

[[File:after_matching.png|300px]]

==5.3 Molecular Graphics: UCSF Chimera==

<div class="time-estimate">
Time estimated: 4 h; taken 3.5+ h; date started: 2019-10-22; date completed: 2019-10-23

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:23, 24 October 2019 (EDT)
</div>

;Activity 1 - Going through getting started tutorial
:* a useful Menu functionality: Select > Selection Mode

'''''Useful Commands'''''
* open <pdb_code>
* close <modelID>
* display <atom_spec>: display atoms specified. Doc for atom specification for Chimera is [https://www.rbvi.ucsf.edu/chimera/docs/UsersGuide/midas/frameatom_spec.html here]
* ribbon: show ribbon (<code>~ribbon</code> would be hide ribbon)
* start <tool>: invoke Chimera tool <tool>
* color/col <color_name> <spec>: (special commands: "col byelement", "col by het")
* represent/rep <style> <spec>
* rlabel <selection>: show residue label for <selection>
* label <selection>: show atom label for <selection>
* select <atom_spec>: make a selection (<code>select up</code> would upgrade selection to the whole residue, similar to "same residue as ..." in VMD)
* show <selection>
* surface/surf

* <code>~</code> opposite operator
* <code>:</code> residue name/number specification
* <code>#</code> model specification
* <code>.</code> chain ID specification
* <code>@</code> atom name specification
* <code>=</code> partial wildcard (comparable to * in Shell)
* <code>?</code> single character wildcard (comparable to . in Shell)
* <code>,</code> "OR" operator
* sel: current selection

;Activity 2 - Practising stereo viewing (divergent)

1. open 1bm8

2. preset apply pub 1

3. Turn on depth cueing

4. Tools > Depiction > Rainbow

5. Tools > Viewing Controls > Camera, select "camera mode" as "wall-eye stereo"

6. <span style="color:red">The separation between my pupils is 7 cm.</span> So I will make the separation between the two images about 6 cm.

7. View it as in the instruction in the course material [http://steipe.biochemistry.utoronto.ca/abc/index.php/BIN-SX-Chimera].

8. It worked like wonders! The 3D view was especially obvious when I rotate the structure with mouse, and when my eyes got tired.

3D image sustained for quite a separation of my eyes from the screen (until I mis-clicked elsewhere and it's all disrupted..)

[[File:1BM8_stereo.png|500px]]

;Activity 3 - Ramanchandran plot

(Straightforward. In the Model Panel directly)

;Activity 4 - B-factor colouring

Hydrogens by default is coloured with the lowest B-factor (blue)?!

[[File:bfactor_render.png|400px]]

;Activity 5 - Viewing coulombic surface

(Viewing Panel will be my best friend)

(DNA-binding site is probably the one underneath, very blue and positive and looks like there's a pocket)

[[File:coulombic_mbp1.png|400px]]

;Activity 6 - Is the sequence in Chimera implicit or explicit?

1. open 1bm8

2. File > Save PDB, call it "1bm8_Q1A.pdb"

3. Delete the following lines:
 ATOM      6  CG  GLN A   4      -0.797   3.008  17.820  1.00 57.21           C
 ATOM      7  CD  GLN A   4      -0.029   2.066  18.730  1.00 60.18           C
 ATOM      8  OE1 GLN A   4       1.135   2.325  19.071  1.00 61.12           O
 ATOM      9  NE2 GLN A   4      -0.673   0.970  19.131  1.00 61.27           N
 ATOM     13 HE21 GLN A   4      -0.200   0.339  19.714  1.00  0.00           H
 ATOM     14 HE22 GLN A   4      -1.594   0.835  18.832  1.00  0.00           H

(I think the following lines are not from the sidechain, so I retained them)
 ATOM     10  H1  GLN A   4      -1.493   5.767  14.644  1.00  0.00           H
 ATOM     11  H2  GLN A   4      -0.148   4.764  14.393  1.00  0.00           H
 ATOM     12  H3  GLN A   4      -1.618   4.097  14.918  1.00  0.00           H

4. Rename the first residue GLN to ALA

5. Save and load in Chimera. Check with Favorites > Sequence

6. The first residue is denoted as "A". '''Therefore the residue identities in the Sequence tool is IMPLICIT!'''

[[File:proofimplicit.png|500px]]

==5.2 Protein Data Bank==

<div class="time-estimate">
Time estimated: 1 h; taken 90 min; date started: 2019-10-21; date completed: 2019-10-21

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:23, 24 October 2019 (EDT)
</div>

===5.2.1 PDB files===
*flat file (no inherent indexing structure), column-formatted

;HEADER, COMPND, SOURCE: identity of the structure

;SEQRES: explicit sequence, the PDB-sequence for database searches, in the material the experimentalist actually worked with
:* not to be confused with implicit sequence, which is the sequence as registered with coordinates (can have unmodelled parts missing)

;Insertion codes: 
:* Sometimes a sequence number will be followed by a capital letter (e.g. 23 followed by 23A). This is used in sequences that are longer than other homologous counterparts.
:* Used to maintain common numbering scheme within a homologous family

;ATOM: protein or nucleic acids

;HETATM: ligands, cofactors, solvents

;Occupancy: fraction of sites that are occupied by that atom (often seen as 1.0, but modelled coordinates without experimental support have occupancy of 0.0)

;B-factor: thermal fluctuation of atoms related to mean coord displacement if fluctuations are isotropic
:* <math>B = 8\pi^2 <\mathbf{x}^2></math>
:* Often hard to interpret because of anisotropic fluctuation of atoms, poor crystals etc. But generally confidence of position?

;For biological inferences, make sure to distinguish whether we are looking at asymmetric unit or biological unit! It's also not always obvious whether symmetry is induced by crystallization.

===5.2.2 Alternative structural services===
;[https://www.ncbi.nlm.nih.gov/Structure/MMDB/mmdb.shtml MMDB]: a structural database by NCBI

;[http://ndbserver.rutgers.edu/ Nucleic Acid Structural Database (NDB)]

;[http://www.ebi.ac.uk/thornton-srv/databases/cgi-bin/pdbsum/GetPage.pl?pdbcode=index.html PDBsum]: secondary database by EBI. Has analysis and interpretation information

===5.2.3 Navigation of RCSB PDB website===
;Objective: get more familiar with RCSB PDB

1. Search Mbp1

2. Found 3 entries for the ''S. cerevisiae'' Mbp1 protein (keyword search IS indeed bad..):
:* PDB codes: 1BM8, 1MB1, 1L3G

3. Navigate the entry 1BM8:
:* Can download PDB-file or biological assembly?!
:* Protein feature view shows domain topology
:* In this example, asymmetric unit is the biological assembly

4. Go to "3D View": as expected, the core of the protein is mainly hydrophobic

5. Go to "Annotations": Search parameters = CathTree Search for Mlu1-box Binding Protein; DNA-binding Domain (3.10.260)
:* There are currently 6 entries in PDB with this domain/fold (including 1BM8)

6. Go to "Sequence": can annotate sequence with DSSP secondary structure propensities and annotate domains

7. Go to "Sequence Similarity": self-explanatory, basically BLAST-like?

8. Go to "Structural Similarity":
:* determined by jFATCAT-rigid algorithm? [http://www.rcsb.org/pdb/explore/structureCluster.do?structureId=1BM8]
:* Has P-value, RMSD, Score, percent identiy, Cov? (probably described in the publication above)
:* Clicking entries under "Domain 2" will go to the same type of page but for this new domain
:* Clicking "view" under "Results" gives a lot more functionalities worth exploring. Related to structural alignments.

9. Go to "Experiment": can find experimental details of structural determination for this entry.

==5.1 Structural Concepts==

<div class="time-estimate">
Time estimated: 1 h; taken 30 min; date started: 2019-10-15; date completed: 2019-10-15

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 13:10, 15 October 2019 (EDT)
</div>

===5.1.1 Abstraction and storage===
;Structures are time-averaged and population-averaged.

;Computable abstraction of structure:
:* coordinates
:* chemical types (e.g. atom types)

;Quality metrics:
:* resolution
:* R-work, R-free
:* bond length and angle deviations
:* coordinate error (e.g. from diffraction data)

;Choosing the right structural model for analyses:
:* Quality of the dataset (raw data) and model-building (overfitting based on R-ratios)
:* Method of structure determination
:* Experimental conditions (native environment?)
:* Model completeness (fewer missing segments)
:* When making inferences about related proteins, the sequence similarity is important
:* Space group and crystal contacts
:* When analysis pertains to ligand binding, the holo structures would be desirable

===5.1.2 Visualization and interpretation===
;Types of tructure representation depends on purpose.

;Stereo view! Trick my eyes into seeing 3D with left and right images?

;Interpretation: structure as collection of features

{{Vspace}}
=4 Background Knowledge and Concepts=
==4.7 STA-Information Theory==

<div class="time-estimate">
Time estimated: 0.5 h; taken 30 min; date started: 2019-10-29; date completed: 2019-10-30

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 16:33, 30 October 2019 (EDT)
</div>

;Motivation: 
Information is there when there is discrepancy between observation and generic expectation. (Claude Shannon)

e.g. Observed sequence distribution different from expected generic or stochastic sequence distribution.
There is information there. Perhaps something about the sequence (functional significance).

An intuition for the quantity ''H'' to measure production of information...

If a set of events have probabilities <math>p_1</math>, <math>p_2</math>, ..., <math>p_n</math>, then ''H'' as a function of the probabilities should:
* ''H'' should be continuous
* If all <math>p_i</math>'s are equal, ''H'' is a monotonic increasing function of <math>n</math>
* ''H'' is independent of the sequence of choices to observe a particular distribution

;There is only one functional form for ''H'' that has all of the above. It is defined as the [https://en.wikipedia.org/wiki/Entropy_(information_theory) information entropy].

Special case: if all probabilities are equal, <math>H=\log(n)</math>

;Definition of Information (rigorous):
Difference between the entropy of a distribution expected and the entropy of the entropy actually observed.
:* Beware that what the expected distribution is will depend on context
:* Also beware that small sample size always overestimate observed entropy (recall pseudocounts).

;Example application in bioinformatics - [https://en.wikipedia.org/wiki/Sequence_logo sequence logo plot] (i.e. unexpected biases in amino acid preference.. information about function and evolution?)

==4.6 STA-Multiple Testing==

<div class="time-estimate">
Time estimated: 0.5 h; taken 25 min; date started: 2019-11-12; date completed: 2019-11-12

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 11:45, 12 November 2019 (EST)
</div>

;Family-wise error rate:
Probability of having at least one false positives in a family of observations

There is a problem with setting false positive threshold for each observation. The chance of having at least one false positives is a lot higher than the threshold.

Corrections have been devised.

;Bonferroni multiple adjustment:
For N observations, each will be applied a false positive threshold of overall FWER divided by N.
:* Not technically incorrect, but too conservative

;False discovery rate approach:
More adapted approach. Through accepting a certain number of false positives
:* Tend to overemphasize the ones with low standard deviation values over the ones with consistently strong significances
:* The standard approach for differential gene expression analysis

==4.5 STA-Significance==

<div class="time-estimate">
Time estimated: 1.5 h; taken 2 h; date started: 2019-10-25; date completed: 2019-10-26

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:37, 26 October 2019 (EDT)
</div>

;Probability for inference:
Given a null hypothesis, the probability of the observations.
Very small of probability of such observations or '''''more extreme observations''''' might mean the alternative to the null hypothesis would explain the observations.

;Significance levels: threshold of such probabilities
:* (Nothing really special about the 0.05)

;Objective: Learning about statistical significance by going through FND-STA-Significance.R

===4.5.1 The P-value===
The probability of observing ''a value'' is vanishingly small. However, we still get some value.

;By probability of an observation, we actually assumes that:
:* The observation variable follows some kind of probability distribution
:* The probability distribution can be integrated from some value to it's upper/lower bounds

;P-value: By the probability of getting the observation (P-value), we mean the probability of the observation OR more extreme observations (integral from value to upper/lower bounds).

;P-value can be one-sided or two-sided on the probability distribution

Line 123: r is a vector of N numbers sampled from the normal distribution N(0,1). <code>(r<x)</code> is a vector of booleans at which TRUE if r<x or FALSE if r>x.

<code>sum(r<x)</code> will treat TRUE as 1 and FALSE as 0, which gives the number of elements of r that's less than x.

Line 151: The probability of a value drawn from r is less than or equal to x is:

<code>sum(r<=x)/length(r)</code>

===4.5.2 Determining P-value of an observation===

;If analytical or numerical integration method is applicable, the significance of observation can be computed.

;If not (e.g. unknown probability distribution?), simulation or permutation methods could be used to determine significance.
:* '''Empirical P-value''': (r+1)/(N+1) (where r is the number of observed outcome equal or more extreme, and N is the number of sampling)

Line 235: Recall that unlist() turns a list into a vector

Line 239-245:
<source lang="R">
ED  <- grep("[ED]", v) #Get all the positions in v that is either E or D
RKH <- grep("[RKH]", v) #Get all the positions in v that is either R, K, or H

#Initiate a vector of numberic type that has the same length as the number of E or D in the sequence (variable ED)
sep <- numeric(length(ED)) # this vector will hold the distances 
for (i in seq_along(ED)) { #For each position of E or D
  sep[i] <- min(abs(RKH - ED[i])) #Compute the distance to the closest positively charged residue and store it
}
</source>

Line 287: A useful punchline to re-shuffle a vector:
<code>w <- sample(v, length(v))</code>

Line 307-309: To see the statistical significance, I would look at empirical P-value like:
<source lang="R">
((sum(chs > chSep(v))+1)/(N+1))
</source>

As it says, surprisingly, mean min charge separation observed is larger than the average we might expect from a random permutation.

Well, even if we test the statistical significance of the observed being greater, the P-value still turns out to be 0.115, 

failing to reject the null hypothesis that the observed being greater than random average is due to random chance at the level of 0.05.

===4.5.3 Interpretation of statistical significance===
;Misuse of P-values:
A P-value of 0.05 does not mean alternative hypothesis to null is correct 95% of time.

It means given the null hypothesis, there is 5% chance of getting the observation or more extreme observations. [https://www.nature.com/news/statisticians-issue-warning-over-misuse-of-p-values-1.19503]

;Basically, it's not that simple such that  P < 0.05 for the observation means significant finding and vice versa.

Don't make P=0.049 and P=0.051 to be fundamentally different. It's more favourable to see the science of statistical inference.

That would involve more than just a P-value cut-off for observations, but appeal to the appropriate methods. As it is said, the difference between stat. sig. and stat. insig. may not be statistically significant [https://www.nature.com/articles/nn.2886]

Consider: Statistical significance of interaction of variables terms and interaction tests, before and after treatment, assumptions

==4.4 STA-Probability Distributions==

<div class="time-estimate">
Time estimated: 2 h; taken 2 h; date started: 2019-10-25; date completed: 2019-10-25

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 17:40, 25 October 2019 (EDT)
</div>

;Objective: Review some prob distribution concepts by running through FND-STA-Probability_distribution.R

;Useful functions:
:* plotrix::multhist(): multiply-stacked histogram
:* cut(x, breaks=n): cut a numeric vector x into n parts and convert to factors. Great for converting numerical data into categorical data.

;install.packages("plotrix")

===4.4.1 Probability functions in R: utilities===
* d...: value of p.d.f. at a given outcome x value
* p...: cumulative probability up to x
* q...: value of x at which the given quantile cut-off occurs
* r...: randomly sample from a probability distribution

===4.4.2 Some important distributions===
;Poisson distribution: pois(n, p)
:* n: number of occurance
:* p: average probability of occurance

;Uniform distribution: unif(from, to)
:* often useful for Monte-Carlo simulation methods of estimation

;Normal distribution: norm(mean, var)
:* Central Limit Theorem (CLT): averages of samples drawn from distributions tend to follow Normal Distribution

===4.4.3 Quantile analyses===
Line 260-286:
CLT observation - It appears that the larger the sample size is for the sampling from distribution, the means follow Normal Distribution more closely.

===4.4.4 Chi-sq test for comparing discrete distributions===
;Reminder of what chi-sq test does:
R-code line <code>View(rbind(as.vector(countsL1),as.vector(countsL2)))</code>

Null hypothesis is that the distribution among V's is independent of the rows (1 or 2).

Chi-sq metric is related to the sum of squares of each rows values of V's difference from the averages of V's. Larger the value the less likely the independence. [http://www.r-tutor.com/elementary-statistics/goodness-fit/chi-squared-test-independence]

[[File:chi-sq_table.png|500px]]

In R: chisq.test()
:* <code>simulate.p.value = TRUE</code> seems like a good idea?
:* B: number of replicates for simulate.p.value

[https://stats.stackexchange.com/questions/113692/test-identicality-of-discrete-distributions For comparing discrete distributions, there are important caveats!]

===4.4.5 Kullback-Leibler divergence/relative entropy method for comparing discrete distributions===
Compare bt two inputs of probability mass functions.

<code>sum(log(p / q))</code>

where p and q are two probability mass functions (in terms of vectors)

;To see what an obtained value means, can draw a number of random samples from the distribution q and compare the KL value for that against KL value of p.

;One caution about probability mass functions obtained from frequencies from simulations: by random chance if certain outcomes were not sampled at all will be assigned a 0.

Ways to get around it:
:* Probability "bracketing"
:* Adding pseudo-counts (e.g. Laplace prior, Jeffreys prior...)

===4.4.6 Kolmogorov-Smirnov test for comparing continuous distributions===
Null hypothesis is that two samples were taken from the same distribution.

In R: ks.test()

==4.3 STA-Probability==

<div class="time-estimate">
Time estimated: 1 h; taken 70 min; date started: 2019-10-16; date completed: 2019-10-16

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:54, 21 October 2019 (EDT)
</div>

;To compute probabilities, know:
:* events
:* all possible alternative events

;Approaches to compute probabilities:

1. Closed form expression (e.g. binomial)

2. Enumeration (i.e. list all possible outcomes by judiciously make outcome table or trees. Intuition can be deceptive in many cases!)

3. Simulation (when problem is too complex and large to be tractable by closed form expression or enumeration of outcomes. Furthermore, sometimes whether the assumptions are correct is unclear. But simulation only strictly gives an estimate of real probability?)

A question: If a restriction-endonuclease site is six bases long, how many such sites would you expect in a 3MB long bacterial chromosome with a GC-content of 50%?

 Since GC content is 50%, so is AT content. Base pairing requirement implies that the probability of a base being A, G, C, or T is 25%
 Consider the entire chromosome of length N base pairs to be a series of N-6+1=N-5 slots
 Probability of a slot being the six-base-long restriction site is <math>0.25^6</math>
 I am assuming the identity of a base is independent of what other bases are.
 This is a "with-replacement" assumption that may not actually be true (there is a fixed number of each base)
 However, with 3 million bases, I expect the assumption to be ok
 The probability of having k of such restriction sites would follow a binomial distribution:
            <math>P(k) = \binom{N-5}{k} p^k (1-p)^{(N-5-k)}</math>
 Expectation:
            <math><k> = \sum_{k=0}^{N-5} k P(k)</math>
 I noticed another assumption I made:
 It often may not be possible to have N-5 restriction sites depending on the sequence of restriction site 
 (e.g. GAATTC immediately makes it not possible)
 However, I expect the probability of that to be vanishingly small anyways

R-code to compute the expectation value:
<source lang="R">
N <- 3e6
p <- (1/4)^6
k <- 0:(N-5)
Pk <- dbinom(k, N-5, p)
kAvg <- k * Pk # I get an average of 732.4207 restriction sites
</source>

==4.2 BIO-Homology==

<div class="time-estimate">
Time estimated: 1.5 h; taken 75 min; date started: 2019-10-30; date completed: 2019-10-30

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 16:33, 30 October 2019 (EDT)
</div>

;Homology: Two genes are homologous iff they have a common ancestor (derived from the same ancestor)
:* <span style="color:red">The one and only definition. A yes or no question.</span>

;Not to be confused with similarity, which can be quantified from 0-100%.
:* Homology '''''often''''' implies similarity in structure and function (especially structure), and by extension, sequences.

;Not to be confused with analogy. Two genes are analogous due to convergent evolution. Similar in structure/function but not from a common ancestor.

Conserved residues among homologs are illuminating, as they might be the determinants of structure and function, given that sequence identity among homologs are not always very high.

;Homologs can be divided into two categories:
:* '''Orthologs''': diverged with speciation (under the same selective pressure, so the function is usually conserved)
:* '''Paralogs''': diverged with duplication (under reduced or no selective pressure, so the function is usually not conserved)

New functionalization from paralogs:
:* Neofunctionalization: acquiring new function
:* Subfunctionalization: still original function, but in different patterns (e.g. times, signal responses, tissue specific)

;Homology algebra:
Commutative and transitive

;Inference of homology:
:* Sequence similarity (e.g. >=25% similarity is too unlikely to be random) -- Probably the most important.
:* Structural similarity

 Things to consider:
 1. Sequence similarity? Coverage is full or partial?
 2. Structure similarity?
 3. Patterns of conserved sequences from alignment
 4. Similarity in function?

;Complications & challenges:
Partial homology often occurs -- often it only makes sense to talk about the evolutionary history of individual domains. Not the whole protein.

Domain boundaries are not often clear, leading to difficulty in inference, computation, and annotation.
:* A helpful database for that matter: CDART(Conserved Domain Architecture Retrieval Tool) by the NCBI

===4.3.1 Defining orthologs===
The most accurate method would be constructing evolutionary trees. However, this is not always practical.

Alternatives are available based on approximations or precomputed results.

;Objectives: Finding orthologs of yeast Mbp1 via non-evolutionary tree methods.

;Activity 1 - Reciprocal Best Match (RBM)
Essentially, BLAST the gene/protein on the target genome/proteome, find the best hit, and BLAST the gene/protein "back". If they form a reciprocal match, then it implies orthology.

1. Go to protein BLAST

2. BLAST with query field as "XP_003645298" in database refseq, and within species "Saccharomyces cerevisiae (taxid:4932)".

3. The top hit is NP_010227.1 (S. cerevisiae Mbp1)

Conclusion: 
XP_003645298 is orthologous to NP_010227.1 (S. cerevisiae Mbp1) by the RBM criterion.

 RBM works probably due to the commutativenesss of homology. The two proteins are in different species. => Orthologs
 There is a key assumption though (I think..): The top hit from BLAST is a sufficient (enough) condition for homology.

;Activity 2 - Orthology by annotation
Use precomputed information -- NCBI has HomoloGene database with precomputed related groups of genes. Annotated in RefSeq protein entries.

1. Go to the Proten entry in NCBI for Mbp1_MYSPE https://www.ncbi.nlm.nih.gov/protein/XP_003645298.1

2. Sometimes I can expect HomoloGene annotation on the right under "Related Information". But this is not available for this entry..

3. View the HomoloGene entry for S. cerevisiae Mbp1 https://www.ncbi.nlm.nih.gov/homologene/?term=NP_010227

4. There are a list of putative homologous genes with protein BLAST options built in AND conserved domain information.

;Other databases for homology inference:
:* eggNOG (evolutionary genealogy of genes: Non-supervised Orthologous Groups)
:* OrthoDB
:* OMA (the Orthologous Matrix): based on precomputed, with syntenny information


==4.1 BIO-Cell Cycle==

<div class="time-estimate">
Time estimated: 1 h; taken 150 min; date started: 2019-10-10; date completed: 2019-10-12

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 17:45, 12 October 2019 (EDT)
</div>

;Universally conserved process for cell division involving many regulatory protein machineries.
:* In fact, they are so highly conserved that many machineries work just fine when expressed in a different species<ref>Molecular Biology of the Cell</ref>

===4.1.1 Phases of cell cycle===
;Interphase: cell growth and chromosomal DNA replication. Makes up the majority of the cell cycle duration
:* '''G1''': cell growth pre-replication
:* '''S-phase''': cell becomes committed to and prepares for division. DNA-replication and centrosome replication
:* '''G2''': cell growth after DNA-replication and prior to mitosis

;Mitotic phase (M-phase): mitosis and cytokinesis. Actual events of cell division.
* '''Mitosis''' (nuclear division)
:* '''Prophase''': nucleolus disappears and chromosomes form from chromatin condensation
:* '''Pro-metaphase''': centrosomes move apart and polarize. Nuclear membrane disappears
:* '''Metaphase''': chromosomes line up along the equator (metaphase plate)
:* '''Anaphase''': centromeres break down and chromosomes separate. Sister chromatids move to opposite poles
:* '''Telophase''': new nuclei re-form
* '''Cytokinesis''' (cytoplasmic division)

;Resting Phase (G0 phase): an off-cycle phase

===4.1.2 Key players in G1/S transition===
;Once going into the S-phase, the cell is committed to divide.

;SBF(transcription factor):
:* Constituents: Swi4 (DNA-binding) + Swi6
:* Binds promoter of SCB elements expressed at START

;MBF (transcription factor):
:* Constituents: Mbp1 (DNA-binding) + Swi6
:* Binds promoter of MCB elements expressed at START

;Whi5/Nrm1: repress G1/S transition expression by binding Swi6 C-terminus through a conserved '''GTB motif'''.

;Useful links for Mbp1:
:* [https://pubs.acs.org/doi/10.1021/bi992212i Characterization of DNA-binding domain]
:* [https://pubs.acs.org/doi/10.1021/bi702339q Thermodynamics of DNA-binding]

{{Vspace}}
=3 Intro to Bioinformatics and Databases=
==3.15 Sequence Alignments==
===3.15.1 The sequence alignment problem===
<div class="time-estimate">
Time estimated: 0.5 h; taken 20 min; date started: 2019-11-13; date completed: 2019-11-13

~~~~
</div>

Much of bioinformatics is based on inference from similarities.

e.g. sequence similarity and inference of homology:
If sequences are significantly more similar than expected by chance, we typically hypothesize shared ancestry and conservation.

To measure sequence similarity, a pre-requisite is typically the '''alignment of sequences'''

;Alignment:
A notation for mapping between a pair of amino acids. The mapping should have meanings.

Typically, the alignment is such to maximize similarity between corresponding positions of amino acids.

'''Correct alignment have meaningful matching of amino acids, from which biological inferences can be made (e.g. descending from a common ancestor)'''

Complications:
Insertion and deletion, multiple alignment possibilities, unclear what is the "true" alignment

Strategies:
Minimize gap lengths, avoid aligning non-equivalent residues, maximize similarity of aligned sequences
:* All have caveats by themselves

'''Superposition of 3D structures''' can be used as the basis of "true alignment". However, it does not tell the evolutionary history of sequence change.

===3.15.2 Amino acid similarity===

<div class="time-estimate">
Time estimated: 1 h; taken 50 min; date started: 2019-11-13; date completed: 2019-11-13

~~~~
</div>

;Ways to model amino acid similarity:
:* identity-only, biophysical, required number of nucleotide changes, amino acids in similar context, other empirical...

;There are many ways to qualify similar amino acids, but quantifying similarity is not straightforward.
:* Function of an amino acid depends on context OR multiple functions are possible (Still, sequence alignment would typically be independent of context)
:* Can think of amino acid similarity system as a ''model'', abstracted into a '''scoring matrix'''
:* Each kind of similarity model would constitute an instance of a scoring matrix

Biophysical similarity turns out to be the least obvious, for that score will depend on different biophysical properties, and how to weight them is not clear.

Instead of first principle similarity, often empirical similarities are adopted.
:* i.e. empirical probability of substitution, based on evolution of point mutations
:* [https://en.wikipedia.org/wiki/BLOSUM BLOSUM vs PAM]? (PAM from global alignment of closely related proteins and extrapolate to greater evolutionary divergence. BLOSUM from local alignment of motifs and does not extrapolate)

BLOSUM also incorporates/considers more evolutionarily distant sequences?

;Activity - Inspect BLOSUM62 matrix (the typical go-to option)
:* Not all identical pairs are equal. e.g. Ser-Ser is lower than His-His, meaning that His is probably more likely conserved.
:* Pairs of similar biophysical properties tend to have higher scores (even positive). e.g. Lys-Leu is -2 while Ile-Leu is 2
:* (A key difference between PAM and BLOSUM) Arg-Trp is low/penalized in BLOSUM, while quite high in Arg-Trp in PAM, due to the ease of mutation.

 Biophysical properties of R and W are very different, 
 yet they seem like they would also often be having their own conserved functions related to their respective biophysical properties.
 I suspect the ease of mutation R-W makes the random R and W in closely related sequences easily interchanged.
 While in distantly related sequences, with conserved motifs considered, 
 R or W are unlikely to be randomly there and hence have respective conserved functions that would not be easily interchanged.


==3.14 Software Development for Research Labs==

<div class="time-estimate">
Time estimated: 2.5 h; taken 115 min; date started: 2019-10-27; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:27, 28 October 2019 (EDT)
</div>

;In general, simpler than "real world software development"

 General philosophy: Make implicit knowledge explicit

;Collaboration platforms: make goals, progress, and responsibilities explicit.

;Making plans: where now, what to achieve, how to achieve, with milestones

;Software design: can take as much, if not more time as development.
:* '''Architecture''' centric design process
:* system modelling, [http://steipe.biochemistry.utoronto.ca/abc/index.php/SPN Structured Process Notation]
:* clear design objectives, correct, robust, extensible, and maintainable
:* separation of concerns (modularity, independence)

;Software development:
:* version control is a must.
:* fail-safe vs fail-fast: which is more favourable is probably context-dependent. Is it more important to get the program running and not crash OR be explicit about improper steps [https://www.yegor256.com/2015/08/25/fail-fast.html]
:* good coding style and keep them organized
:* code reviews

;Quality Assurance(QA): sort of like coordinator of the team and auditor

;Deployment and Maintenance (esp. for softwares used by many research labs)

===3.13.1 Test-driven development (TDD)===
;Objectives:
:* Testing the codes is a must. TDD is a development methodology to ensure codes work as intended.
:* Implement TDD as a process of development aside from finding bugs.
:* Clearly identify testable behaviours of the code

;Typical stages of testing:
1) '''Unit tests''': tests performed on the components of structured units that typically do one thing only without side-effects
:* Unit tests test only one function's behaviour, better not have functional dependencies. That goes into integration tests.
:* [http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/ tips of writing unit tests]

2) '''Integration tests''': integrated code units interact through interfaces under '''''contracts'''''. In integration testing, verify the contracts are accurately and completely fulfilled.
:* "ensure the integrity of the interfaces that have been defined between units"

3) '''Validation tests''': test and validate for successful execution

4) '''Performance tests''': test for optimization, stability

;Activity - Working through RPR-Unit_testing.R

R has testthat package that can do unit testing.

<source lang="R">
install.packages("testthat")

library(testthat) #Because there are too many functions associated with it
</source>

;Useful functions:
:* testthat::expect_true() & testthat::expect_false(): throws an error if the argument functional evaluation does not return expected
 <code>> expect_true(is.integer(NA))</code>
 <code>Error: is.integer(NA) isn't true.</code>

Line 74: The following returns FALSE
<code>49*(1/49) == 1 </code>

The reason is that the numbers are represented exactly in R only if the denominator is a power of 2. Otherwise they are rounded. [https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f]

This returns TRUE though: <code>49/49 == 1</code>

There are other "unpredictable behaviours" when comparing whether two numbers are equal. Be safe and use:

:* all.equal(a, b): returns TRUE if a and b are equal for all practical purposes. Circumvent "unpredictable behaviours"
:* testthat::expect_equal(a, b): uses all.equal internally so use it with no worries..
:* testthat::expect_identical(a, b): here's an option to distinguish a and b to the core..
:* testthat::expect_warning(): throws an error if no warning message be thrown when evaluating the argument expression
:* testthat::expect_error(<expr>, <err_msg>): throws an error if  <expr> does not throw the kind of error message in <err_msg> (See Line 113-116)

:* testthat::test_that(<description>, {<test_code_blocks>}): A series of tests included in {<test_code_blocks>} are carried out. Used when it makes sense to collectively test and call the test a name: <description>

<source lang="R">
# Task: Write a function calcGC() that calculates GC content in a sequence.
#       Hint: you could strsplit() the sequence into a vector, and count
#       G's and C's; or you could use gsub("[AT]", "", <sequence>) to remove
#       A's and T's, and use nchar() before and after to calculate the content
#       from the length difference.
#       Then write tests that:
#          confirm that calcGC("AATT") is 0;
#          confirm that calcGC("ATGC") is 0.5;
#          confirm that calcGC("AC")   is 0.5;
#          confirm that calcGC("CGCG") is 1;

calcGC <- function(sequence) {
    splitSeq <- unlist(strsplit(sequence, split=""))
    totalLength <- length(splitSeq)
    sel <- splitSeq == "G" | splitSeq == "C"
    GCcontent <- length(splitSeq[sel])
    GC <- GCcontent / totalLength
    return(GC)
}

library(testthat)

expect_equal(calcGC("AATT"), 0)
expect_true(all.equal(calcGC("ATGC"), 0.5))
expect_equal(calcGC("AC"), 0.5)
expect_equal(calcGC("CGCG"), 1)

</source>

We can save tests in files organized in a test directory. To ensure tests be executed, there are these functions:
:* testthat::test_file(<path_to_test>)
:* testthat::test_dir(<path>): execute all tests in <path> (I wonder whether the function knows which ones are test scripts.. But either way, I wouldn't put non-tests in a given test dir..)

;Tests blocks may be put at the end of the code as supplement that normally does not gets run, but can be optionally activated during tests.

==3.13 Scripting of Data Downloads from Databases==

<div class="time-estimate">
Time estimated: 2 h; taken 125 min; date started: 2019-11-03; date completed: 2019-11-11

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:46, 11 November 2019 (EST)
</div>

;UniProt:
I have done this before. In R very easy with httr::GET()

A function to download FASTA sequence from UniProt given UniProtID:
<source lang="R">
#1.1  Task - fetchUniProtSeq() function
fetchUniProtSeq <- function(UniProtID) {
    URL <- sprintf("http://www.uniprot.org/uniprot/%s.fasta", UniProtID)
    response <- httr::GET(URL)
    if (httr::status_code(response) == 200) {
        sequence <- dbSanitizeSequence(strsplit(as.character(response), "\n"))
    } else {
        sequence <- character(0)
    }
    return(sequence)
}
</source>

;ScanProsite POST
:* Search expert curated motifs in PROSITE (ExPASy)

The objective here is to automatically retrieve info from PROSITE.

However, I do not know the parameters to construct such GET request. So I will inspect the HTML code for an example output page.

1. Go to https://prosite.expasy.org/scanprosite/

2. Put "P39678" in the Protein Sequence query field. Select "Table" as output option. Then, "START THE SCAN".

3. An output page is displayed. Can view domain names and definitions displayed in plain text. Alternatively, there is a link "Graphics View"

 From tech people's words (Josh C.), Chrome stands out for being the best browser for developers. Fortunately I use Chrome as well.

4. On the query-entry page of ccanProsite (https://prosite.expasy.org/scanprosite/), "More Tools" > "Developer Tools". Select the tab "Elements" to view code. <span style="color:red">(not "View" > "Developer" > "View Source" as stated in the course instructions..)</span>

5. "START THE SCAN"

6. Under the "Network" tab, Find and click "PSScan.cgi" which contains form data, and go to the "Headers" tab.

7. Find "Form Data" under the tab. Found form-key & value pairs

 meta: opt1
 meta1_protein: opt1
 seq: P39678
 skip: on
 output: tabular
 submit: START THE SCAN

8. Now, use the information above to retrieve data from PROSITE. Instructions and tasks are in "RPR-PROSITE_POST.R". Supply key-value pairs to <code>httr::POST</code> function.

9. Retieving and cleaning-up the string contents is done by some regex filtering. A useful function would look like:

<source lang="R">
# Task: write a function that takes as input a UniProt ID, fetches the
# features it contains from ScanProsite and returns a list as given above, or
# a list of length 0 if there is an error.

#Pretty much a copy and paste from Dr. B. Steipe's code in RPR-PROSITE_POST.R
#With my addition of handling status code errors. Same as my fetchUniProtSeq()
fetchScanProsite <- function(UniProtID) {
    URL <- "https://prosite.expasy.org/cgi-bin/prosite/PSScan.cgi"
    #idk whether all other options will be the same for all requests.. Fingers crossed.
    response <- httr::POST(URL,
                           body = list(meta = "opt1",
                                       meta1_protein = "opt1",
                                       seq = UniProtID,
                                       skip = "on",
                                       output = "tabular"))
    if (httr::status_code(response) == 200) {
        lines <- unlist(strsplit(httr::content(response, "text"), "\\n"))
        patt <- sprintf("\\|%s\\|", UniProtID)
        lines <- lines[grep(patt, lines)]
        features <- data.frame()
        for (line in lines) {
        tokens <- unlist(strsplit(line, "\\t|\\|"))
        features <- rbind(features,
                    data.frame(uID   =  tokens[2],
                               start =  as.numeric(tokens[4]),
                               end   =  as.numeric(tokens[5]),
                               psID  =  tokens[6],
                               psName = tokens[7],
                               stringsAsFactors = FALSE))
        }
    } else {
        features <- character(0)
    }
    return(features)
}
#fetchScanProsite("P39678") == dbFetchPrositeFeatures("P39678") returns all TRUEs!
</source>

;NCBI Entrez eUtils API

Somewhat limited data can be retieved similarly with ease from NCBI. The format is in XML.

[https://www.ncbi.nlm.nih.gov/books/NBK25500/ QuickStart Handbook of E-utilities]

Instructions are in "RPR-eUtils_and_XML.R"
:* Retrieval is via RefSeqID

This method uses a lot of R-package <code>xml2</code>. Some useful functions:
:* xml2::read_xml(<url>): returns a list
:* xml2::as_list()
:* xml2::xml_find_all(<doc>, "//"<tag>): <doc> is the list-like object obtained from <code>xml2::read_xml()</code>
:* xml2::xml_text()

Line 70-79:
URL assembled will lead to the XML formatted entry for the entity specified by RefSeqID.

Line 94-123:
What on earth is the <id> tag?? The ID stored in the variable <code>GID</code>. I have never encountered anything like this.

'''Turns out it is the GI number, or GenInfo number of NCBI. For each new sequence NCBI processes (even if it's an update), it gets a new GI number.'''

'''See more at https://www.ncbi.nlm.nih.gov/genbank/sequenceids/'''

Can also end this session by writing data download from NCBI into a function:

<source lang="R">
# Task: write a function that takes as input a RefSeq ID, fetches the taxonomy
# information, returns a list with taxID and organism, if the operation is
# successful, or a list of length 0 if there is an error.

fetchNCBItaxData <- function(refSeqID) {
    eUtilsBase <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/"

    #URL to get GI number
    URL <- paste(eUtilsBase,
             "esearch.fcgi?", 
             "db=protein",    
             "&term=", refSeqID,
             sep="")
    myXML <- xml2::read_xml(URL)

    #I have to error check a bit differently than the ones above, as the request structure changed
    #source("RPR-eUtils_XML.R") #Dependency on the node2text() function in the sourced code
    GID <- node2text(myXML, "Id")
    URL <- paste0(eUtilsBase,
            "esummary.fcgi?",
            "db=protein",
            "&id=",
            GID,
            "&version=2.0")
    myXML <- xml2::read_xml(URL)
    taxID <- node2text(myXML, "TaxId")
    organism <- node2text(myXML, "Organism")

    #Turns out to meet the requirement, I do not need to check for error.
    #If the retrieval is unsuccessful, node2text() anything will return character(0)
    #So that works for me here.
    outputList <- list(taxID, organism)
    names(outputList) <- c("TaxId", "Organism")
    
    return(outputList)
}
</source>

==3.12 Data Integration==

<div class="time-estimate">
Time estimated: 1.5 h; taken 160 min; date started: 2019-10-30; date completed: 2019-10-31

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:48, 31 October 2019 (EDT)
</div>

;Data entity-relationship networks are mapped through their unique IDs (recall data models).

;Data integration is the biggest challenge in bioinformatics.
:* Cross-referencing is everywhere

Challenges and efforts to overcome them:
* Data Redundancy: e.g. GenBank vs RefSeq (recall). In EBI ,there is '''UniRef''' that clusters sequence redundancy based on similarity (100%, 90%, 50%)
* Data integration across different schemas via Federated Databases (distinct databases with their own schemas, but distributed queries and integrate the search results)

: e.g. Entrez in NCBI. UniprotKB in EBI

;Ensembl: 
An EBI's model organism genome data integration project. Access and retieve via the BioMart tool.

===3.12.1 A data integration project: Ensembl via BioMart===
;Objective:
Familiarize with BioMart tool through the R-interface package '''biomartr''' through its [https://cran.r-project.org/web/packages/biomartr/vignettes/Functional_Annotation.html vignettes].

<source lang="R">
install.packages("biomartr")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
Warning in install.packages :
  dependency ‘biomaRt’ is not available
also installing the dependencies ‘backports’, ‘ellipsis’, ‘zeallot’, ‘utf8’, ‘vctrs’, ‘fansi’, ‘pillar’, ‘glue’, ‘tidyselect’, ‘BH’, ‘plogr’, ‘hms’, ‘clipr’, ‘bitops’, ‘R.oo’, ‘R.methodsS3’, ‘tibble’, ‘data.table’, ‘dplyr’, ‘readr’, ‘downloader’, ‘RCurl’, ‘XML’, ‘stringr’, ‘purrr’, ‘R.utils’, ‘philentropy’, ‘fs’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/backports_1.1.5.zip'
Content type 'application/zip' length 68649 bytes (67 KB)
downloaded 67 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/ellipsis_0.3.0.zip'
Content type 'application/zip' length 44567 bytes (43 KB)
downloaded 43 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/zeallot_0.1.0.zip'
Content type 'application/zip' length 62222 bytes (60 KB)
downloaded 60 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/utf8_1.1.4.zip'
Content type 'application/zip' length 215426 bytes (210 KB)
downloaded 210 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/vctrs_0.2.0.zip'
Content type 'application/zip' length 828252 bytes (808 KB)
downloaded 808 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/fansi_0.4.0.zip'
Content type 'application/zip' length 221572 bytes (216 KB)
downloaded 216 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/pillar_1.4.2.zip'
Content type 'application/zip' length 182567 bytes (178 KB)
downloaded 178 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/glue_1.3.1.zip'
Content type 'application/zip' length 173305 bytes (169 KB)
downloaded 169 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/tidyselect_0.2.5.zip'
Content type 'application/zip' length 627063 bytes (612 KB)
downloaded 612 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/BH_1.69.0-1.zip'
Content type 'application/zip' length 19008275 bytes (18.1 MB)
downloaded 18.1 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/plogr_0.2.0.zip'
Content type 'application/zip' length 18872 bytes (18 KB)
downloaded 18 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/hms_0.5.2.zip'
Content type 'application/zip' length 111527 bytes (108 KB)
downloaded 108 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/clipr_0.7.0.zip'
Content type 'application/zip' length 52125 bytes (50 KB)
downloaded 50 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/bitops_1.0-6.zip'
Content type 'application/zip' length 38469 bytes (37 KB)
downloaded 37 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/R.oo_1.22.0.zip'
Content type 'application/zip' length 967788 bytes (945 KB)
downloaded 945 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/R.methodsS3_1.7.1.zip'
Content type 'application/zip' length 77739 bytes (75 KB)
downloaded 75 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/tibble_2.1.3.zip'
Content type 'application/zip' length 337301 bytes (329 KB)
downloaded 329 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/data.table_1.12.6.zip'
Content type 'application/zip' length 2254534 bytes (2.2 MB)
downloaded 2.2 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/dplyr_0.8.3.zip'
Content type 'application/zip' length 3266839 bytes (3.1 MB)
downloaded 3.1 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/readr_1.3.1.zip'
Content type 'application/zip' length 1589773 bytes (1.5 MB)
downloaded 1.5 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/downloader_0.4.zip'
Content type 'application/zip' length 24983 bytes (24 KB)
downloaded 24 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/RCurl_1.95-4.12.zip'
Content type 'application/zip' length 2974210 bytes (2.8 MB)
downloaded 2.8 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/XML_3.98-1.20.zip'
Content type 'application/zip' length 4610084 bytes (4.4 MB)
downloaded 4.4 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/stringr_1.4.0.zip'
Content type 'application/zip' length 217158 bytes (212 KB)
downloaded 212 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/purrr_0.3.3.zip'
Content type 'application/zip' length 426232 bytes (416 KB)
downloaded 416 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/R.utils_2.9.0.zip'
Content type 'application/zip' length 1410270 bytes (1.3 MB)
downloaded 1.3 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/philentropy_0.3.0.zip'
Content type 'application/zip' length 835055 bytes (815 KB)
downloaded 815 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/fs_1.3.1.zip'
Content type 'application/zip' length 982376 bytes (959 KB)
downloaded 959 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/biomartr_0.9.0.zip'
Content type 'application/zip' length 616123 bytes (601 KB)
downloaded 601 KB

package ‘backports’ successfully unpacked and MD5 sums checked
package ‘ellipsis’ successfully unpacked and MD5 sums checked
package ‘zeallot’ successfully unpacked and MD5 sums checked
package ‘utf8’ successfully unpacked and MD5 sums checked
package ‘vctrs’ successfully unpacked and MD5 sums checked
package ‘fansi’ successfully unpacked and MD5 sums checked
package ‘pillar’ successfully unpacked and MD5 sums checked
package ‘glue’ successfully unpacked and MD5 sums checked
package ‘tidyselect’ successfully unpacked and MD5 sums checked
package ‘BH’ successfully unpacked and MD5 sums checked
package ‘plogr’ successfully unpacked and MD5 sums checked
package ‘hms’ successfully unpacked and MD5 sums checked
package ‘clipr’ successfully unpacked and MD5 sums checked
package ‘bitops’ successfully unpacked and MD5 sums checked
package ‘R.oo’ successfully unpacked and MD5 sums checked
package ‘R.methodsS3’ successfully unpacked and MD5 sums checked
package ‘tibble’ successfully unpacked and MD5 sums checked
package ‘data.table’ successfully unpacked and MD5 sums checked
package ‘dplyr’ successfully unpacked and MD5 sums checked
package ‘readr’ successfully unpacked and MD5 sums checked
package ‘downloader’ successfully unpacked and MD5 sums checked
package ‘RCurl’ successfully unpacked and MD5 sums checked
package ‘XML’ successfully unpacked and MD5 sums checked
package ‘stringr’ successfully unpacked and MD5 sums checked
package ‘purrr’ successfully unpacked and MD5 sums checked
package ‘R.utils’ successfully unpacked and MD5 sums checked
package ‘philentropy’ successfully unpacked and MD5 sums checked
package ‘fs’ successfully unpacked and MD5 sums checked
package ‘biomartr’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
C:\Users\Wilson\AppData\Local\Temp\RtmpugqjZJ\downloaded_packages
</code>
</div>
</div>

Error: this package depends on biomaRt. So I still have to install it.

<source lang="R">
install.packages("biomaRt")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Error messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
Warning in install.packages :
  package ‘biomaRt’ is not available (for R version 3.6.1)
</code>
</div>
</div>

Has nothing to do with the Rtools issue. You just gonna install biomaRt a bit differently.

<span style="color:red">On the website, the line <code>source("http://bioconductor.org/biocLite.R")</code> does not work anymore.</span>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Error messages'''''
<div class="mw-collapsible-content">
<code>
Error: With R version 3.5 or greater, install Bioconductor packages using BiocManager; see https://bioconductor.org/install
</code>
</div>
</div>

Eventually, the following procedure worked for me:

<code>
install.packages("BiocManager")
BiocManager::install("biomaRt")
</code>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/BiocManager_1.30.9.zip'
Content type 'application/zip' length 100245 bytes (97 KB)
downloaded 97 KB

package ‘BiocManager’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
C:\Users\Wilson\AppData\Local\Temp\RtmpugqjZJ\downloaded_packages

Bioconductor version 3.9 (BiocManager 1.30.9), R 3.6.1 (2019-07-05)
Installing package(s) 'biomaRt'
also installing the dependencies ‘bit’, ‘bit64’, ‘blob’, ‘memoise’, ‘Biobase’, ‘DBI’, ‘RSQLite’, ‘prettyunits’, ‘AnnotationDbi’, ‘progress’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/bit_1.1-14.zip'
Content type 'application/zip' length 248571 bytes (242 KB)
downloaded 242 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/bit64_0.9-7.zip'
Content type 'application/zip' length 551687 bytes (538 KB)
downloaded 538 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/blob_1.2.0.zip'
Content type 'application/zip' length 44536 bytes (43 KB)
downloaded 43 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/memoise_1.1.0.zip'
Content type 'application/zip' length 36885 bytes (36 KB)
downloaded 36 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/Biobase_2.44.0.zip'
Content type 'application/zip' length 2421976 bytes (2.3 MB)
downloaded 2.3 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/DBI_1.0.0.zip'
Content type 'application/zip' length 889249 bytes (868 KB)
downloaded 868 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/RSQLite_2.1.2.zip'
Content type 'application/zip' length 2265825 bytes (2.2 MB)
downloaded 2.2 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/prettyunits_1.0.2.zip'
Content type 'application/zip' length 33620 bytes (32 KB)
downloaded 32 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/AnnotationDbi_1.46.1.zip'
Content type 'application/zip' length 5224938 bytes (5.0 MB)
downloaded 5.0 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/progress_1.2.2.zip'
Content type 'application/zip' length 84996 bytes (83 KB)
downloaded 83 KB

trying URL 'https://bioconductor.org/packages/3.9/bioc/bin/windows/contrib/3.6/biomaRt_2.40.5.zip'
Content type 'application/zip' length 620819 bytes (606 KB)
downloaded 606 KB

package ‘bit’ successfully unpacked and MD5 sums checked
package ‘bit64’ successfully unpacked and MD5 sums checked
package ‘blob’ successfully unpacked and MD5 sums checked
package ‘memoise’ successfully unpacked and MD5 sums checked
package ‘Biobase’ successfully unpacked and MD5 sums checked
package ‘DBI’ successfully unpacked and MD5 sums checked
package ‘RSQLite’ successfully unpacked and MD5 sums checked
package ‘prettyunits’ successfully unpacked and MD5 sums checked
package ‘AnnotationDbi’ successfully unpacked and MD5 sums checked
package ‘progress’ successfully unpacked and MD5 sums checked
package ‘biomaRt’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
C:\Users\Wilson\AppData\Local\Temp\RtmpugqjZJ\downloaded_packages
Installation path not writeable, unable to update packages: boot, foreign, KernSmooth, mgcv, nlme
Old packages: 'digest', 'rlang'
Update all/some/none? [a/s/n]: 
a
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/digest_0.6.22.zip'
Content type 'application/zip' length 242655 bytes (236 KB)
downloaded 236 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/rlang_0.4.1.zip'
Content type 'application/zip' length 1104621 bytes (1.1 MB)
downloaded 1.1 MB

package ‘digest’ successfully unpacked and MD5 sums checked
package ‘rlang’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
C:\Users\Wilson\AppData\Local\Temp\RtmpugqjZJ\downloaded_packages
</code>
</div>
</div>

Now <code>library(biomartr)</code> should work..

Useful functions in biomartr [https://cran.r-project.org/web/packages/biomartr/vignettes/Functional_Annotation.html]:
:* biomartr::getMarts(): list all available databases in biomart
:* biomartr::getDatasets(mart=<database_name_str>): returns a tibble object? (list all datasets in the database with dataset, description, and version)
:* biomartr::getAttributes(mart=<database>, dataset=<dataset>): retrieve available attributes
:* biomartr::getFilters(mart=<database>, dataset=<dataset>): see available filters for <dataset> that can be used as biomartr() query options.
:* biomartr::organismBM(organism=<organism>): get a whole list of databases(marts)-datasets where annotations exist for the <organism> (organism centric query).
:* biomartr::organismAttributes(<organism>, topic=<topic>): get a table of attribute names, datasets and marts available for <organism>. The topic option helps search related to <topic> (e.g. "id", "homolog").
:* biomartr::organismFilters(<organism>, topic=<topic>)
:* biomartr::getProteome(db=<database>, organism=<organism>, path=<path>): retrieve proteome data and store in <path>. Returns <path>.
:* biomartr::read.proteome(<path>, format)
:* biomartr::biomart(genes, mart, dataset, attributes, filters): '''The main query function'''. In filters, specify the query key (type. e.g. "refseq_peptide"). Cross-reference to attributes. 
:* biomartr::getGO(): Querying GO

:* options(tibble.print_max = Inf): show all elements of a data frame

;Overall I did not quite enjoy biomartr.. The codes are slow and the documentation is not super easy to follow or intuitive. At least it gets the jobs done.

===3.12.2 Working through BIN-Data_integration.R===
;Objective: Use httr package in R to ID-map through Uniprot API

:* httr::POST(<url>, body): send query POST request to <url>. The query is specified in body, which is a named list.
::* For Uniprot ID-mapping, the url is "https://www.uniprot.org/mapping/"
::* For Uniprot ID-mapping, the body of query has the structure: from, to, format, query. query stores the actual vector supplied to the query field.

:* httr::content(<response>): argument is a response object, e.g. created by httr::POST().
::* To display query result, use <code>cat(httr::content(<response>))</code>
:* httr::status_code(<response>): if not 200, error occurred

Line 94:
A great punchline/idiom <code>read.delim(file = textConnection(httr::content(response)), sep = "\t", stringsAsFactors = FALSE)</code>

This turns response of POST request ultimately to a data frame. How nice!

Line 99-103:
There is no 3 columns (I thought one of the queries is a dummy?). Also the column names are already "From" and "To".

'''I will have UniProtIDmap() upon workspace setup. So nice!'''

<source lang="R">
# task: map the three genes to their UniProt Identifier.
myIDs$uID[match(myQuery, myIDs$refID)]
</source>

Another useful function:
:* match(<x>, table): returns a vector of indices of table at each position of <x> where a match is made. NA is no match is found.

==3.11 Function Databases for Bioinformatics==
;Objective: Familiarize with databases with functional information and related information, as well as annotations.

;EC (Enzyme Commission) numbers:
:* Molecular function in terms of types of reactions.
:* Hierachial classification into 4 levels (e.g. 2.4.1.11 transferase-glycosyl-hexosyl-11: Glycogen Synthase! The actual name would be a recommended name though. Not immediately obvious from that it does transferase-type reaction)
:* Used as the standard annotation in PDB

;Gene Ontology (GO):
:* Categories: Cellular Component, Molecular Function, Biological Process
:* Maintains pertinent controlled vocabularies
:* Entities are connected through relationships such as is_a, has_a etc.
:* Annotate individual genes in terms of generalized functions above
:* General standard annotation for many databases

;Other annotations of gene sets (e.g. pathways, generalized pathways, functional networks)
:* e.g. databases: KEGG (saw this while doing research about yeast Mbp1 on NCBI), MetaCYC
:* STRING database: integrated, cross-referenced tool for discovering through building networks of genome scale functional networks

===3.11.1 Pathway databases===

<div class="time-estimate">
Time estimated: 1.5 h; taken 110 min; date started: 2019-10-29; date completed: 2019-10-29

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 16:29, 29 October 2019 (EDT)
</div>

;MetaCyc: 
:* Enzymes, reactions, compounds, metabolic pathways, richly curated
:* Evidence is experimentally validated [doi 10.1093/nar/gkx935]
:* Can be used by applications to do high throughput computation/prediction of metabolic networks (e.g. PGDB, available through BioCyc)

;Activity 1 - Navigate MetaCyc

1. Go to https://metacyc.org/

2. On the top right, "change organism database". Select "Saccharomyces cerevisiae S288c"

3. We end up in BioCyc yeastCyc info summary. First a table of Replicons with gene statistics. Then there is a table of information available below.

4. "Metabolism" > "Cellular Overview"

Conclusions:
:* We get a map of pathway systems grouped into some large categories. Zooming in will see symbols (legends available) turn into substrate names. Individual pathways also get names.
:* On the right there are a lot of isolated pathways? All very short. Maybe they are just less well-integrated with the rest major pathways.
:* Notice the brown boundary represents cell boundary. There are transport involved pathways on them.


;Reactome:
:* Focused on mannual annotation of human pathways [doi 10.1093/nar/gkx1132]
:* Uses proper models to construct an extended pathways with signal transduction, transport, DNA replication etc. included.
:* New as of 2018: Enhanced High Level Diagrams, Neo4j graph database structure

;Activity 2- Navigate Reactome

1. Go to https://reactome.org/

2. "Pathway Browser"

3. On the left "Event Hierachy", Expand "Cell Cycle" > Click "Cell Cyle Mitotic". This zooms in.

4. Click the round icon "Open Pathway Diagram" next to the search bar. This will load the diagram of the pathway (basically the cell cycle!)

5. Double click "Mitotic G1-G1/S Phases" will display detailed pathway diagram for it. With just a single click, can view a lot of decriptions beneath.

6. Under "Molecules", we see participating molecules in this pathway. External cross-references proteins (Uniprot), compounds (ChEBI), and DNA/RNA (ENSEMBL). List downloadable.

7. Under "Expression", there are tissue-specific expression levels.


;WikiPathways [doi  10.1093/nar/gkx1064]:
:* Has mostly been on genes and proteins. As of 2018, expanded to metabolism.
:* Sounds more or less similar to the ones already seen
:* The tand-out feature: Open source & collaborative. Available on github.

;Activity 3 - Navigate WikiPathways

1. Go to https://www.wikipathways.org/index.php/WikiPathways

2. Search "Mbp1". One pathway found (Cell Cycle and Cell Division - Saccharomyces cerevisiae).

3. Can click on a protein and link to lots of annotations and external cross-references, as well as other pathways it is involved in.


;KEGG (Kyoto Encyclopedia of Genes and Genomes) [doi 10.1093/nar/gky962]:
:* KEGG pathway maps. Some other implemented modules (e.g. KEGG Ontology) enable mapping to transfer to other cellular organisms.
:* New as of 2018: KEGG NETWORKS (more below).
:* Take into account that the database of health information of KEGG expanding, making treatment of human as a single species in mapping unreasonable.
:* In a nutshell: iseased state as perturbed networks

;Activity 4 - Navigate KEGG Pathways

1. Go to KEGG Pathways https://www.genome.jp/kegg/pathway.html

2. Select Organism prefix "sce". Search keyword "Mbp1"

3. Get one pathway (Cell cycle in yeast) sce04111

4. Clicking on the proteins will get external cross-referenced protein information.

===3.11.2 Functional PPI databases===

<div class="time-estimate">
Time estimated: 0.5 h; taken 30 min; date started: 2019-10-29; date completed: 2019-10-29

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 16:29, 29 October 2019 (EDT)
</div>

;Many of such databases exist. However, there is still needs for better annoatated confidence, interactiveness, visualizability, and data comprehensiveness [doi 10.1186/s12859-015-0615-z]

(I recall somewhere in Uniprot where it cross-reference PPI databases and was cautioned that the results could be very different -- inconsistency?)

;STRING: An outstanding PPI database. Current version 11 as of 2019. [doi 10.1093/nar/gky1131]
:* integrated PPI info from various sources, consistently ''scored'', with computational predictions as well.
:* Both physical and functional interactions.
:* New to 2019: input genome-wide datasets to visualize the subsets in the context of bigger interaction networks.

;Activity 1 - Navigate STRING database

1. Go to https://string-db.org/cgi/input.pl

2. Search Protein "Mbp1" and Organism "Saccharomyces cerevisiae"

3. Voila! A network of interactions. By clicking "+More" I can see the network but expanded into bigger context. Undo with "-Less"

4. Click the node "SKN7". There is a summary and external cross-references. Structure is available. Otherwise, there are SWISS-MODEL homology models as well??! (with identity scores)

5. Clicking edges can give a lot more details about the interactions, such as confidence score for functional association and binding, evidence.

6. Downloadables are available. Both plain text TXT and database SQL files?


==3.10 General Databases and Services for Bioinformatics==
;Objective: Familiarize with the well-known commonly used databases and services and what they offer.
===3.10.1 European Bioinformatics Institute (EBI)===

<div class="time-estimate">
Time estimated: 1.5 h; taken 3.5 h; date started: 2019-10-28; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 17:14, 28 October 2019 (EDT)
</div>

;EBI: one of the two largest, data for genomics and molecular biology, data integration and services, well-curated

;Notable new resources in 2018 [doi 10.1093/nar/gky1124]:
:* Single cell expression atlas
:* PDBeKB: more cross-references and visualization, annotations

This is helpful for my own records (data resources available from EBI) [doi: 10.1093/nar/gky1124]:

[[File:EBI_data.png|600px]]

;Uniprot: one of the best things offered by EBI. Protein knowledge. Well-curated. Many sequence annotations.

 Many of these resources also offer training programs.

;Activity 1 - Do some EBI search on Mbp1

1. Go to https://www.ebi.ac.uk/

2. Search "mbp1"

3. EBI query help page: https://www.ebi.ac.uk/ebisearch/documentation.ebi
:* Query syntax supports capitalized BOOLEAN OPERATORS, wildcards (*), "exact matches", (grouping), and Apache Lucene regex
:* Query syntax also supports field:keywords searches, as well as cross-referenced prefix:number searches

4. Back to the search results for "mbp1". Under "Protein Sequences", found the entry <code>P39678(MBP1_YEAST) Source: UniProtKB (ID: MBP1_YEAST)</code>
:* There are cross-references and various formats available

5. Click this entry.

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
Explore the Uniprot entry for P39678.
<div class="mw-collapsible-content">
 '''Status: Reviewed (Swiss-Prot).'''
 
 '''Annotation score = 5/5''' (lots of content, but not indication for accuracy!).
 
 '''Experimental evidence for its existence at the protein level.''' This includes protein sequencing, MS, structural characterization, PPI or detection by antibodies

 '''Function: Pay attention to the type of evidence for the functional annotations'''

 GO terms: https://www.uniprot.org/help/gene_ontology

 In my case: 1) Molecular Function: IMP, HDA. 2) Biological Process: IMP, IBA

 '''Names & Taxonomy''': cross-referencing a lot. e.g. NCBI Taxonomic identifier. Protein names, gene names. SGD shows up under "Organism-specific databases".

 '''Subcellular location''': contains GO-cellular component annotations. Has regions of membrane spanning noted if available.

 '''PTM / Processing''': Annotated processing information of the whole peptide sequence with source publications. (PTM database: iPTMnet)

 '''Interaction''': quaternary structure, information relevant to PPI, cross-referencing databases

 '''Structure''': list of structures with quality metrics and other attributes compared. Also cross-refereces and annotations of known structural elements along the sequence.

 '''Family & Domains'''/'''Sequence''': (more annotations and cross-references to other databases)

 '''Similar proteins''': great for finding homologs and variants. Can do similarity analysis through alignment.
</div>
</div>

?How does automatic annotations work?

;Activity 2 - Verify whether the N-terminal start codon is correctly annotated.

;CDS: coding sequence

There seems to be a couple ways I can get the information about DNA sequence location in the genomic context.

Under the "Sequence" on the Uniprot page:
1) [https://www.ncbi.nlm.nih.gov/gene/851503 GeneID 851503] can bring me to NCBI RefSeq database.
:* Primary source: SGD:S000002214
:* Locus tag: YDL056W
:* Here is the sequence: Chromosome: IV, NC_001136.10 (352877..355378)
:* FASTA and GenBank formats are available for download here. In addition, there is a "Sequence Viewer" tool.
:* In the sequence viewer, when you zoom in enough, individual nucleotides will show up.
:* '''In the sequence viewer, you can even download FASTA and GenBank formats of customized ranges. e.g. visible sequence ranges'''

2) Alternatively, access [https://www.ncbi.nlm.nih.gov/nuccore/BK006938.2 GenBank BK006938.2] can bring us to Chromosome IV. Click "Graphics" will bring us to the same "Sequence Viewer" interface.

3) More alternatively, '''''Ensembl Fungi''''' by EBI can also provide such information. Simply go to [http://fungi.ensembl.org/Saccharomyces_cerevisiae/Location/View?db=core;g=YDL056W;r=IV:352877-355378;t=YDL056W_mRNA EnsemblFungi YDL056W].
:* Very similar layout follows. Seems like more formats of downloads are supported under "Export data" on the left. Also has customizable ranges.

;Conclusions:
:* Extensive cross-referencing is very nice: provide extra reassurance for what I am doing.
:* But too many identifiers are painfully too much to mentally contain (so we don't..)
:* The reason I see so many entries with GenBank ID under Uniprot > "Sequence" is probably that GenBank sequences are individually submitted, whereas RefSeq is non-redundant [https://www.ncbi.nlm.nih.gov/books/NBK50679/#RefSeqFAQ.what_is_the_difference_between_1].
:* mRNA sequences from both are in DNA-nucleotide (AGCT) format! Also, they both start at ATG start codon, so ORF. Is that the most pre-maturely transcribed pre-mRNA? I don't know yet...
:* Personally I prefer NCBI version of the functionalities because things look a bit nicer.. But both are good to me so far. Course notes say NCBI cross-references are less open.
:* Actually, NCBI's stuff is a bit annoying with both GenBank and RefSeq.

;Activity 3 - Do some searches with MYSPE Mbp1, annotation transfer

1. Go to https://www.uniprot.org/uploadlists/

2. Convert RefSeqID = NP_010227 to UniProtID

3. '''The UniProtID is G8JQ18''' {I have done this before}

4. Explore Uniprot entry G8JQ18 [https://www.uniprot.org/uniprot/G8JQ18]:

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
Explore Uniprot entry G8JQ18.
<div class="mw-collapsible-content">
 '''Status: Unreviewed (TrEMBL).'''
 
 '''Annotation score = 2/5'''
 
 '''Existence of the protein is predicted.''' "Without evidence at protein, transcript, or homology levels". Only because it has an ORF?

 '''Function''': Automatically annotated by InterPro, EnsemblFungi? All evidence code is IEA.

 '''Names & Taxonomy''': No "Organism-specific databases". Proteome info = UP000006790 Component: Chromosome 2. All automatically annotated in blue.

 '''Subcellular location''': Localized into nucleus (auto. annot.).

 '''PTM / Processing''': N/A

 '''Interaction''': One entry from STRING PPI-database: 45285.XP_003645298.1

 '''Structure''': N/A

 '''Family & Domains'''/'''Sequence''': (auto. annot.) Inferred similar to ''S. cerevisiae'' Mbp1. Looks like the genome is sequenced though.

 '''Similar proteins''': Some low score 50% identity entries.
</div>
</div>

;Conclusion: Mbp1_ERECY is poorly characterized with little information available. At least the genome sequence for this organism seems available.

===3.10.2 National Center for Biotechnology Information (NCBI)===

<div class="time-estimate">
Time estimated: 1.5 h; taken 2 h; date started: 2019-10-28; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 23:33, 28 October 2019 (EDT)
</div>

;NCBI: one of the two largest, data for genomics and molecular biology, data integration and services

;Entrez: NCBI uses this integrated database retrieval system. E-utilities support its programming interface. [doi: 10.1093/nar/gky1069]

;Well-known/Notable services as of 2019: PubMed, PubMedLabs, PMC, PubChem, BLAST...

This is helpful for my own records (Entrez databases available from NCBI) [doi 10.1093/nar/gky1124]:

[[File:NCBI_data.png|600px]]

;Activity 1 - Entrez search Mbp1 protein

1. Go to https://www.ncbi.nlm.nih.gov/

2. Search "mbp1" under all databases.

3. We get databases under 6 categories (Literature, Genes, Proteins, Genomes, Genetics, Chemicals)

4. Go to Proteins > Protein. There are 836 records. We get a list of GenBankID'ed entries of protein information that has "Mbp1" as keyword.

 Problem with such a simple keyword search: Many other unrelated proteins are also called Mbp1. There's a lot of ambiguity and the search is too non-specific.

5. [https://www.ncbi.nlm.nih.gov/books/NBK3837/ Entrez help page] has many tips of querying and descriptions of databases.
:* Query syntax also supports capitalized BOOLEAN OPERATORS, wildcards (*), "exact matches", (grouping)
:* Does not seem to support regex
:* '''Additionally, there is <nowiki>[indexed fields]</nowiki>''' (e.g. <nowiki>horse[Organism]</nowiki>. explore options under Advanced Search)
:* Can have ranges by using range operator <code>:</code> (e.g. 110:500[Sequence Length])
:* Some special query interpretation abilities as well such as the interpretation of "stopwords" resulting in automatic field mapping.
:* MeSH and Organism fields are controlled vocabularies. Each PubMed record has some MeSH terms associated (as well as taxonomy?). "Queries are automatically mapped to these vocabularies whenever possible" [https://www.ncbi.nlm.nih.gov/books/NBK3837/].

Another good reference compiled by users of this course are [http://steipe.biochemistry.utoronto.ca/abc/students/index.php/Entrez here]

6. Now, search <code>mbp1[protein name] AND "Saccharomyces cerevisiae"[organism]</code>. Get 2 entries.

7. Go to the entry with Accession CAA98618.1. We get a GenBankFF formatted entry.

8. There is a link called "Identical Proteins". There are many identical sequences stored in NCBI.

<span style="color:red">I think there's an error in the [http://steipe.biochemistry.utoronto.ca/abc/index.php/BIN-NCBI#Protein_Sequence learning module content]. XP_ should be inferred/hypothetical whereas NC_ should be genomic.</span>

'''SwissProt is probably the best annotated and curated.'''[http://steipe.biochemistry.utoronto.ca/abc/index.php/BIN-NCBI#Protein_Sequence]

;* Some of the entries are indeed identical (but different sources). Some other ones are not exactly "identical" as they come from different '''''strains'''''.

 The RefSeqID for Mbp1 protein is NP_010227.1

 The UniprotID for Mbp1 protein is P39678.1

9. In Identical Proteins, follow the RefSeq protein record NP_010227.1

10. On the right side, there are a couple functionalities.

 '''Analyze this sequence > Identify conserved domains''': 
 * Protein classification (in terms of domains), graphical view of protein sequence with mapped & annotated domain regions, domain hits with detailed descriptions, sequence alignments, and E-value
 * References

 '''Protein 3D Structure''':
 * No direct panel of comparison of structural determination parameters and quality but are available in each individual entry
 * Can view 3D structure in iCn3D (I don't like it), find similar structures, link to PubMed publication record, links to GenBank protein entries, Conserved Protein Domain Family entries.

 '''Pathways for the MBP1 gene > Cell cycle - yeast''':
 * Dense verbal description of the pathway system, accompanied by a complicated clickable KEGG pathway map.
 * Associated genes, proteins, small molecules and citations

 '''<span style="color:red">Related Information > Proteins with Similar Sequence NO LONGER EXISTS!</span>''' Redirected to Smart BLAST.

;Conclusion: Again, plentiful of cross-references. But nothing beats their literature database PubMed!

;Activity 2 - Explore PubMed

1. Go to the [https://www.ncbi.nlm.nih.gov/protein/NP_010227.1 NCBI Mbp1 record NP_010227.1]

2. On the right, Related Information > PubMed (PubMed articles cited by this protein sequence record). There are 2 entries.

3. Related Information > PubMed(Weighted). Practically, this might be what I'm looking for the most. Not directly cited by the record, but find many relevant information as well. 67 entries.

4. Doc for PubMed https://www.ncbi.nlm.nih.gov/books/NBK3827/. It'd be good to be able to search better.

5. Search in PubMed <code>Mbp1[TI] AND Biochemistry[TA]</code> gives me 3 entries. Voila.

 Articles: 
 Thermodynamics and specificity of the Mbp1-DNA interaction.
 Characterization of the DNA-binding domains from the yeast cell-cycle transcription factors Mbp1 and Swi4.

;Activity 3 - Explore Mbp1_ERECY in NCBI databases

1. Search protein with RefSeqID XP_003645298. "Hypothetical protein"

 '''Analyze this sequence > Identify conserved domains''': 
 * Two different annotations were found compared to SC Mbp1. They are Ank_2 and SMC_prok_B super family (SbcC super family in SC). Both have KilA-N and ANKYR.

 '''Protein 3D Structure''': does not exist (no surprise)

 '''Pathways for the Ecym_2783 gene > Cell cycle - yeast ...''': Looks like annotation transfer..

 PubMed result == PubMed(Weighted) result. Both points to one article {{#pmid:22384365}}

;Conclusion: Again, little is known about Mbp1_ERECY..


===3.10.3 Other specific organismal databases===

<div class="time-estimate">
Time estimated: 0.5 h; taken 25 min; date started: 2019-10-29; date completed: 2019-10-29

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 16:29, 29 October 2019 (EDT)
</div>

Here's a well-known one: '''Saccharomyces Genome Database (SGD)'''

;Activity 1 - Explore Mbp1 on SGD

1. Go to the entry for Mbp1 on SGD https://www.yeastgenome.org/locus/S000002214

2. Mostly the same kinds of information you'd expect, starting out with a nice description.
:* A nice specialized info: Null expression and overexpression phenotypes are available
:* Mannually curated "Summary Paragraph" very nice and informative of the protein.

3. Under "Protein", there is ''Median Abundance''. More useful details under "Protein Details" with downloadables.

4. On top: "Analyze" > "Gene Lists". Supply the following identifiers from yeast and "Create List":

 YAR014C YBR040W YBR200W YCL027W YCR089W YDL223C YDR085C YDR141C
 YER125W YER133W YER149C YHR102W YHR135C YHR158C YIL129C YKL048C
 YKL189W YKR031C YLL021W YLR229C YLR313C YLR332W YMR232W YNL154C
 YNR032C-A YOL111C YOR326W YPL123C YPR194C

(Summary downloadable. List savable)

5. Go back to the beginning. "Analyze" > "GO Slim Mapper"

6. Supply the above list of genes as query input. GO Set set to "Yeast Go-Slim:function". AND "Select All Terms..." Then submit form.

7. Gave me set of GO IDs that reflect molecular/enzymatic activities to which each gene is assigned. But there is no big picture about the list of genes (if there are any at all..)

8. Go back, instead set GO Set to "Yeast Go-Slim:function". AND "Select All Terms..." Then submit form.

9. Clearer now that 27/29 genes are assigned to "cell morphogenesis" GO term.

10. <span style="color:red">There is no "Download Results" anymore!</span> Even better, I can download them in multiple optional formats (e.g. HTML, plain text...).

I will write a R-script to process the files in the future when needed. [[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:57, 29 October 2019 (EDT)


==3.9 Databases==
<div class="time-estimate">
Time estimated: 1 h; taken > 35 min; date started: 2019-10-21; date completed: 2019-10-21

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:54, 21 October 2019 (EDT)
</div>

;Choice of database system depends on objectives.

;Database: a layered system of components to store, update and retrieve information

;Users-Interface interactions:
:* Normal users <=> GUI, webpages
:* Applications (require high throughput interface supporting automated multiple queries) <=> API
:* Information systems (e.g. another database) <=> Library (stable accession keys and cross-referencing)
:* Database Admin <=> Console, Command line interface

;Query system:
:* Evaluates queries/interaction requests and turn into consistent language for the actual storage system via the data system
:* Give interfaces what to return to users?

;Storage management:
:* Process actual transactions of data, such as adding, modifying, and retrieving data
:* '''ACID requirements''': atomicity, consistency, isolation, durability (don't know how to actually implement these...)

;Data objects:
:* apart from data objects themselves, real big databases have index tables, stored procedures for high throughput transactions, as well as dictionaries of configurations and statistics of uses

==3.8 Storing Data==

<div class="time-estimate">
Time estimated: 3 h; taken > 3 h; date started: 2019-10-17; date completed: 2019-10-20

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:54, 21 October 2019 (EDT)
</div>

===3.8.1 Data representation===
;Bits: The most elementary representation of data (0 or 1)

;Data formats: specified for storing complex data
:* Flat-file formats: store as files and define ad-hoc rules to specify how the lines of files will be parsed (e.g. FASTA, GenbankFF, PDB files)
	'''Documentation, maintenance, and correct parsing is a big problem with the ad-hoc approaches. i.e. everything breaks if the file format changes'''
:* Structured data grammars: language for storing data, with rules for parsing of which parsing code can be produced automatically (e.g. XML, JSON)

;XML:
:* comes with open and end markups with definitions specified in .dtd files (document type definition)
:* R has some XML parsing packages which are preferred over manual parsing with regex

;JSON:
:* Python-dictionary-like, much more human-readable
:* Two types of contents: {objects} and key<nowiki>:</nowiki>value pairs
:* Versatile data types and complexity for values

===3.8.2 Implementation of relational data models===
* Computer file systems (represent the data model in terms of files and directory trees)

* Place into spreadsheets (e.g. CSV), but analyze data by exporting data from CSV into e.g. R data frames

* "Real" databases for large-scale, robust data requirements. (e.g. MySQL, Postgresql, dplyr...)

===3.8.3 Running through BIN-Storing_data.R===
;Useful commands:
:* '''rm()''': remove object from memory
:* '''order(x)''': returns a vector of array indices of x ordered based on the items in x
:* '''file.show(<path>)''': display plain text file specified by <path>(string)
:* '''unlist(<list>)''': flatten/simplify <list> into a vector

;Objectives:
:* Learn how to build a database in R (in terms of a list of data frames)

;Activity 1 - Build a database of philosophers


;Activity 2 - Use JSON to organize database for Mbp1-like proteins
R-package: jsonlite
* Useful functions:
:* '''fromJSON(<path>)''': read and parse from .json file specified by <path>(string) and returns a data frame
:* '''dbSanitizeSequence()''': for parsing. Clean-up and returns a single string of one-letter code protein sequence (all uppercase)
:* '''dbInit()''': generates a list of data frames to represent the relational database

;Activity 3 - Find a protein from MYSPE most similar to Mbp1 to be added to the database

1. To find such protein, BLAST: https://blast.ncbi.nlm.nih.gov/Blast.cgi

2. Protein BLAST

3. Query Sequence = NP_010227, Database = Reference Proteins (refseq_protein), Organism = Eremothecium cymbalariae

4. BLAST!

7 sequences found that produce significant alignments. The first sequence has E-value rounded to 0.0 (Sequence_ID XP_003645298.1)

Link to the protein: https://www.ncbi.nlm.nih.gov/protein/XP_003645298.1?report=genbank&log$=protalign&blast_rank=1&RID=UT6SVB5U014

Link to the organism: https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=931890


;Activity 4 - Put information pertaining to MYSPE into JSON files
1. Find UniprotID at https://www.uniprot.org/mapping/

2. Query XP_003645298 from RefSeq Protein to UniProtKB

The UniprotID is G8JQ18

3. To get a protein sequence, copy from the NCBI protein info page and use <code>dbSanitizeSequence()</code>

4. To store in JSON, use the following script:

<source lang="R">
lengthToLookNice <- 70

MYSEQ <- "        1 msstsvasrd qiysakysgv evyefihptg simkrkaddw vnathilkaa kfakakrtri
       61 lekevikdih ekvqggfgky qgtwvpldia rrlaekfdvl eelrplfdfs qrdgsasppq
      121 apkhhhasrs dstkkgtgks psgalnnasg svipkrrgrp prskkldrip asgdaalqrs
      181 rsdvtgfhkp sitistissh nlpsiqstlq rgvnideqqh yqdklqqqis qqkyeeldie
      241 dglssdietn layiaegpvg snrlntqlmt gkeepvssss slpsspsdfs apvpfdtqrv
      301 gsatspigam lprysmqsrp ptsdldqkvn dylaklvdyf insemqntna vpiellnpph
      361 stpyidawid sehhtafhwa camgnlpive allqagashr avnhagetpl mrasmfhnsy
      421 tkrtyprifq llqdtvfdid sqsqtvvhhi vkrrsntqsa lyyldvllsk ikdfspqyri
      481 etlintqddk gntplhiaai ngdkkffqtl lgsgalstlk nydgvtadvf innkfsrtln
      541 ysehsyhygn gtthspasts tgavitgpag aaaasasasf ihtgdmfpsq aatsvsraip
      601 evinlmkdma dsyqglyqdr sqelqsikkm lksmnntvas vdikiletld ikkyeqigqt
      661 meditqaide lqsrftvkqk clmnilekgq riqlqrline qeqeidkhqe esesksgpsi
      721 npnlitgike lailqlrrka kikqmlellc gnskvqkfrk misqgtdmel devdnfldvi
      781 lqqlnddnea kkinnpngvt"

cleanSeq <- dbSanitizeSequence(MYSEQ)

(seqLength <- nchar(cleanSeq))

toStore <- character()
i <- 0
while (i*lengthToLookNice+1 <= seqLength) {
    toStore[i+1] <- substr(cleanSeq, start=i*lengthToLookNice+1, stop=(i+1)*lengthToLookNice)
    i <- i + 1
}

toStore
</source>

5. Create MYSPEtaxonomy.json with only one entry of MYSPE

6. Both JSON files validated at https://jsonlint.com/

;Activity 5 - Make an R script to create my own database
<span style="color:red">'''Because I keep my makeProteinDB.R and JSON files in my own BCH1441 folder for my version control, I have to <code>source("../makeProteinDB.R")</code>'''</span>

<span style="color:red">'''Because successfully sourcing ABC-createRefDB.R requires <code>getwd() == C:/Users/Wilson/Documents/BCH1441/ABC-units</code> in my RStudio setup, I have to setwd() after sourcing ABC-createRefDB.R or change all the paths appropriately'''</span>

* Useful functions:
:* '''View(<dataframe>)''': view dataframe in terms of a readable table in RStudio

Protein sequence is correct. Copy and paste the whole sequence into Protein BLAST gives 100% match to the intended protein.


==3.7 Biomolecular Function==

<div class="time-estimate">
Time estimated: 0.5 h; taken 25 min; date started: 2019-10-28; date completed: 2019-10-28

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 23:33, 28 October 2019 (EDT)
</div>

;Function: More than just the activity of biomolecules.
:* Consider: in vitro vs in vivo functions, context/cell-dependent function, promiscuous functions
:* function is more appropriately understood as a concept imposed by us to make sense of/explain/categorize observed biomolecular activities and behaviours.

;Questions in bioinformatics pertaining to functions: define, represent, annotate, and predict

;Functions can be:
1) high-level (e.g. cell survival)

2) intermediate (e.g. exocytotic pathway)

3) specific (e.g. catalyze a specific reaction)

However elusive biomolecular function might be, one thing for sure: functions are tied to evolution.
:* Function can be understood as the aspect of the biomolecule behaviour under purifying selection

;Annotation of biomolecular function: Depends on the molecule as well as the '''''database context'''''.
:* e.g. function of an amino acid in contribution to a protein structure/stability, function of DNA-binding site in gene regulation etc.

;Function representations:
:* E.C. numbers: type of catalyzed reaction
:* Pathways: as a member of collaborating biomolecular system
:* Gene ontology (GO)/OBO: hierachial assembly of knowledge with relationships such as is_a, has_a

;Prediction of biomolecular functions:
:* Ab initio: e.g. structural patterns of residues
:* Homology/annotation transfer
:* Association: associated in networks of co-expression, co-regulation, PPI etc.


==3.6 Sequences==

<div class="time-estimate">
Time estimated: 3 h; taken 190 min; date started: 2019-10-26; date completed: 2019-10-29

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:57, 29 October 2019 (EDT)
</div>

;Sequences are a great abstraction of bio-macromolecules: computable, compact and understandable

;There are limitations: ambiguity, limited information content (e.g. no modifications, no annotations), cross-comparison of related sequences

;Chromosome/genome location annotations:
Human's starts from the telomere of the short arm to the telomere of the long arm.

e.g. 7p14.1 means '''chromosome 7, short arm, band 14 from telomere out (bands shown after Giemsa dye), subregion 1.

;Important to keep in mind that sequences in biology are not static, and many processes can change/modify them.

===3.6.1 Running through BIN-Sequence.R===
;install.packages("stringi")

;R-packages that manage biological sequences - Biostrings

(pretty nice. JUST USE IT!)

;Useful functions:
:* Biostrings::DNAString(), Biostrings::RNAString(), Biostrings::AAString(): convert string sequence into a complex sequence object (can be converted back by as.string())
:* <span style="color:red">substring(<string>, start, end): unlike substr(), start and end can both be vectors!</span>
:* sprintf(): very cool. Also apparently vectorized. Support placeholders (%s: string %d: digit %f.n: fraction with n digits after the decimal shown)
:* <span style="color:red">Use cat() to display things like '\n' properly</span>

Some more string methods:
:* tolower() OR toupper()
:* stringi::stri_reverse() <span style="color:red">'''(Line 180: reverse() does not work for me for some reason?! But rev() works, though it reverses vector order though..)'''</span>

 <span style="color:green">'''Solution: it seems like the line should be Biostrings::reverse()'''</span>

:* chartr(old, new, <string>): change the characters in <string> that are in <code>old</code> into corresponding characters in <code>new</code>
:* letters & LETTERS: built-in variables of vectors of lowercase and uppercase letters
:* gsub(<pattern>, <replacement>, <string>): substitute <pattern> in <string> into <replacement>. Supports regex (A useful punchline: <code>s <- gsub("\\s", "", s)</code>)
:* stringi::stri_match_all(<string>, regex = <regex>): match and extract all <regex> matching substrings in <string>

===3.6.2 Going through RPR-Biostrings.R===
;Useful functions:
:* Biostrings::readDNAStringSet(<path>): can read single- or multi-sequence FASTA file to get a set of DNAStringSet class. Can subset it like a list.
:* Biostrings::uniqueLetters()
:* Biostrings::alphabetFrequency() OR Biostrings::letterFrequency(<XString>, <letters>): count letter frequency
:* Biostrings::dinucleotideFrequency() & Biostrings::trinucleotideFrequency()
:* Biostrings::subseq(<XString>, <start>, <end>)
:* Biostrings::reverseComplement()
:* Biostrings::translate(): (returns an AAString object)
:* Biostrings::toString(<XString>)
:* Biostrings::Views(<XString>, start, end): returns a viewing of several substrings defined by start and end (the return value can be named, though it doesn't show it but it's there..)
:* Biostrings::AAStringSet(<vector_of_XStrings>): create a string set object
:* Biostrings::width(<StringSet>): get vector of '''lengths''' directly!

(If Biostrings::length(<StringSet>) is applied, you'll get the number of XStrings in <StringSet> and not applied vectorized. This might be because <StringSet> acts like a list, not vector)

'''It is generally advisable to import by <code>library(Biostrings)</code> because of potentially many dependencies.'''

Line 131: <code>length(biosDNAseq)</code> gives the number of "BString" elements!

Line 133: <code>nchar(biosDNAseq)</code> only works with <code>library(Biostrings)</code>!

Line 157: Nice! I can shuffle the sequence very easily when working with Biostrings by simply using <code>sample()</code>

Line 166: Nice! Biostrings support direct subsetting.

Line 177-179: Apparently a DNAString is IDENTICAL to an RNAString if contents are all the same except T vs U..

===3.6.3 FASTA sequence manipulation===
;Objective: work with FASTA sequences in R by going through RPR-FASTA.R

Commonly used extension for FASTA is .fsa

;Useful functions:
:* rle(<x>): run length encoding. Encode a vector with consecutive repeated elements into a different format. $lengths returns vector of lengths of repeats. $values returns vector of repeated elements in <x>.
:* cumsum(): returns a vector of cumulative sums.
:* grepl(<pattern>, <vector>): returns a vector with TRUE wherever in the <vector> matches <pattern> otherwise FALSE (constrast with grep() which returns indices)
:* textConnection(<object>): write object into a "decoy textfile" in memory, so that it can be passed into functions/operations that expect a file.

;Activity 1 - Reading FASTA
Line 49: <code>myFASTA <- readLines("./data/S288C_YDL056W_MBP1_coding.fsa")</code> (that warning message..)

<span style="color:red">Important! readlines() gets rid of "\n" after operating on a file.</span>

<span style="color:red">Make sure to be clear about the assumption about the file read. Best to comment it in the code</span>

(Remember said that plain-text format is not very good for this?)

Line 145: <code>(starts <- c(1, (cumsum(runs$lengths)[-length(runs$lengths)] + 1)))</code>
:* <code>length(runs$lengths)</code>: number of sections

;Activity 2 - Interpreting FASTA

(Quite straightforward. Often we split the strings for analysis)

;Activity 3 - Writing FASTA

Line 268-269:
It doesn't seem to matter.. Although for example if <code>nchar(s) == 90</code>, <code>starts</code> will miss 91, which does not exist anyways.


==3.5 Abstractions==

<div class="time-estimate">
Time estimated: 30 min; taken 35 min; date started: 2019-10-15; date completed: 2019-10-15

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 11:39, 15 October 2019 (EDT)
</div>

;Motivation:
:* Making biology "computable". Extract the essential parts and represent them effectively.
:* Central part in modelling biology
:* Keep in mind that the abstraction itself is not biology though!
:* Draw rigorous and potentially powerful and complete conclusions. (re. knot example)

;Elements of modelling biology:
:* Represent biology as data
:* Define the rigorous/unambiguous meaning of data
:* Define operations and algebras with data
:* Metrics to represent the target properties

;Elements of abstraction:
:* Define the labels
:* Structure the relationships between labels (recall normalized data models)

;We make inferences about biology from its model

;Controlled Vocabulary: uniquely defined to represent an item

;Ontology: a set of terms in terms of controlled vocabularies and relationships between them
:* define the semantics (e.g. "Is a ..." relationship)


==3.4 MYSPE ==

<div class="time-estimate">
Time estimated: 1 h; taken 35 min; date started: 2019-10-14; date completed: 2019-10-14

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 22:30, 14 October 2019 (EDT)
</div>

;Motivation:
:* Define protein function in terms of computable entities and characterize it as part of a system with collaborating components
:* To make inferences about protein function, we often have to extend knowledge about protein function from well-characterized '''model organisms'''

===3.4.1 Model Organisms===
* Extensively characterized, methods readily available
* Value is primarily for transfer biological knowledge to other organisms

===3.4.2 Choosing MYSPE===
;Objective:
:* Through model-organism reasoning, infer the function of Mbp1 protein in related species of fungi from ''Saccharomyces cerevisiae''. 
:* Choose a species to work with. The species in question will need to have the whole genome sequenced.

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Configuration messages after init() ABC-units project'''''

'''''I recently resetted/wiped out my computer so that might be why'''''

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 22:30, 14 October 2019 (EDT)
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/jsonlite_1.6.zip'
Content type 'application/zip' length 1162207 bytes (1.1 MB)
downloaded 1.1 MB

package ‘jsonlite’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpyKqYBu\downloaded_packages
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
also installing the dependencies ‘sys’, ‘askpass’, ‘curl’, ‘mime’, ‘openssl’, ‘R6’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/sys_3.3.zip'
Content type 'application/zip' length 59866 bytes (58 KB)
downloaded 58 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/askpass_1.1.zip'
Content type 'application/zip' length 64780 bytes (63 KB)
downloaded 63 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/curl_4.2.zip'
Content type 'application/zip' length 4123128 bytes (3.9 MB)
downloaded 3.9 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/mime_0.7.zip'
Content type 'application/zip' length 48231 bytes (47 KB)
downloaded 47 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/openssl_1.4.1.zip'
Content type 'application/zip' length 3971462 bytes (3.8 MB)
downloaded 3.8 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/R6_2.4.0.zip'
Content type 'application/zip' length 58850 bytes (57 KB)
downloaded 57 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/httr_1.4.1.zip'
Content type 'application/zip' length 511180 bytes (499 KB)
downloaded 499 KB

package ‘sys’ successfully unpacked and MD5 sums checked
package ‘askpass’ successfully unpacked and MD5 sums checked
package ‘curl’ successfully unpacked and MD5 sums checked
package ‘mime’ successfully unpacked and MD5 sums checked
package ‘openssl’ successfully unpacked and MD5 sums checked
package ‘R6’ successfully unpacked and MD5 sums checked
package ‘httr’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpyKqYBu\downloaded_packages
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
also installing the dependency ‘Rcpp’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/Rcpp_1.0.2.zip'
Content type 'application/zip' length 4535652 bytes (4.3 MB)
downloaded 4.3 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/xml2_1.2.2.zip'
Content type 'application/zip' length 3503035 bytes (3.3 MB)
downloaded 3.3 MB

package ‘Rcpp’ successfully unpacked and MD5 sums checked
package ‘xml2’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Wilson\AppData\Local\Temp\RtmpyKqYBu\downloaded_packages
</code>
</div>
</div>

;Activity -- Get MYSPE through <code>~/BCH1441/ABC-units/BIN-MYSPE.R</code>

:* Not much is known about ''Eremothecium cymbalariae'', according to Wikipedia.

:* Taxonomy: Fungi > Ascomycota > Saccharomycotina > Saccharomycetes > Saccharomycetales > Dipodascaceae > ''Eremothecium''
:* Shares the same order as ''Saccharomyces cerevisiae''
:* Produces aerial mycelium (filamentous, like mushrooms) instead of growing like yeast [NCBI, https://www.sciencedirect.com/science/article/pii/S0960982206000418]
:* Genome size of 9.6Mb, 8 chromosomes

==3.3 Data Models==

<div class="time-estimate">
Time estimated: 1 h; taken 4.5 h; date started: 2019-10-11; date completed: 2019-10-17

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:07, 25 October 2019 (EDT)
</div>

The motivation for constructing appropriate database models -- how to store data for efficient computation and avoid errors by ensuring self-consistency.

===3.3.1 Data organizing principles===
;Normal Form: A data model is normalized so to "reduce data redundancy and improve data integrity" [https://en.wikipedia.org/wiki/Database_normalization]

;Primary Key: a label that uniquely identifies a record in the database.
:* Pointing to information. Not storing information. It should not depend on the underlying mutable information.
:* However, it can contain information about the database, rather than about an individual record.
:* It's desirable that I define my own primary keys and maintain them myself, so that I can ensure they aren't mutable.
e.g. Instead of storing protein name, which is not unique (many proteins have the same name but in different species) and can result in duplicate storage, use a unique ID independent of entry attributes

;Foreign Key: a primary key in a different table. Appears in current table for cross-referencing.
:* Do not store information/attributes for an entity that does not depend on the entity (unless for computational load reasons... in this case have to ensure the fields are updated).
:* For these attributes, I would create a new table, each entity with a unique primary key. Then, cross-reference.
e.g. The species an entry in ''Proteins'' belongs to would not be stored in ''Proteins'' because species does not depend on the specific protein.

Create a new table called ''Taxonomy'' for cross-referencing.

Each ''Protein'' entity will map to only one ''Taxonomy'', but each ''Taxonomy'' entity can map to any number of ''Protein'' entities. (Species does not depend on the specific protein, but a specific protein corresponds on a unique species)

;Cardinality: How often can we expect a key value to appear in a different table.

;Relationship: a relationship between two tables are described by referencing the primary key of a different table and the cardinalities of such relationship.

;Cardinalities can be used to check my data model:
:* N-to-N: inconsistent model? (e.g. a map between a protein entity and its functions?)
:* 1-to-1: redundant. Attribute depends on the entity and can be stored in the table of the entities (e.g. a map between a protein entity and its protein sequence).

;Store atomic values as attributes:
:* Although what is considered atomic is context dependent.
:* The bottom line is, the data model is such that I only need to parse my data once when I enter it into database.
e.g. For domain regions, it would make sense to store starting residue number and ending residue number separately.

;The value of an attribute should necessarily and sufficiently depend on the entire primary key.
:* This is not the case if I were to create a Feature table whose primary key is a '''composite key''' (protein entity + feature entity).
e.g. Protein-to-Domain map in the course notes example, and Protein-to-Function map suggested above (N-to-N problem). Duplication and inconsistent name problem.

Solution:
;Joint Table (or Junction Table/Associative Entity)
e.g. Create an annotation table with annotation primary keys in the above example. This is a commonly used approach.

'''''The bottom line'''''

* The value of an attribute is specific to the entity record in the table (i.e. functionally dependent on the primary key).
* All attribute is atomic.
* All information is unique (no duplication! Duplicate storing information can risk screwing up and is a bad idea!)

===3.3.2 Build a relational data model for transcription factors===
;Objective: practise constructing a relational data model for the following question:

 Some of the proteins that you might want to store are transcription factors. 
 A transcription factor has a canonical binding site sequence, and there are sequences it actually has been observed to bind to. 
 The actual binding instances in specific locations may have genes associated with them, which encode proteins. 
 You might come up with other facts that are important too.

One version:

[[File:ERDversion1.jpg|500px]] 

Another version (if my idea of "double-joint" works/is a thing.. this would allow getting information of activation or repression of expression):

[[File:ERDversion2.jpg|500px]] 

==3.2 Information Sources for Bioinformatics==

;Canadian Bioinformatics Workshops: https://bioinformatics.ca/
:* Workshops, many learning resources

;International Society for Computational Biology: http://iscb.org

;Journals
:* ''Bioinformatics''
:* ''Nucleic Acids Research'' (It has a really nice current database volume and a Web service volume for each year. 2019 Check out: EncoMPASS<ref>EncoMPASS: an online database for analyzing structure and symmetry in membrane proteins</ref>, The MemProtMD database</ref>The MemProtMD database: a resource for membrane-embedded protein structures and their lipid interactions</ref>)
:* ''BMC Bioinformatics''
:* ''PLoS Computational Biology''

 For each bioinformatics resources/services, look for:
 1. what to expect with such resources and 
 2. how to use the services

==3.1 Motivation==
===3.1.1 Molecular biology can be understood in terms of information flow===
;Dogma:
: DNA sequences --> protein structure --> protein interactions & assembly --> functional circuits of biological systems

;However, we seem to not be able to deterministically infer higher level information from lower level at each step.
: What's getting in the way -- '''incomplete information'''

===3.1.2 Funfamental task: Data management===
* Amount of biological data is huge
* The field is evolving '''very rapidly'''
* Need to make things query-able
* Many challenges: data & service overload, poor integration ...

===3.1.2 Funfamental task: Modelling===
* "Data alone does not explain itself." (B. Steipe)
* It's often not entirely clear what are the best data resources, best analysis tools or services. Again, things go outdated very fast, and it's not often not straightforward to compare resources [insight!]
* This necessitates that bioinformatics is not just about data itself. Bioinformatics aims to contribute to the understanding of biology through modelling.
* This necessitates focusing on objectives rather than methodology.
* Activities have to turn into better understanding. Otherwise, it would just be cargo cult [insight!].

{{Vspace}}
=2 Introduction to R=
==2.10 Final Notes on Coding Style==
;General principles: clarity, readability, don't get witty, generality, explicitly (ok, the last two are kind of a stretch with the rhyme)

;Comments: Use LOTS of comments. Not just what but also why. Indent to format nicely.

;Headers, separators, and always end your code with an # [END] comment

;def GLOBAL_VARIABLES at the beginning

;'''options()''': set truly global options

;Use <package>::<function>() over library() (explicit)

;Do not mess with the global state

;Try to always else the if statement

;set.seed() to allow reproducible results from codes involving random processes for debugging purposes.
:* set.seed(NULL) to re-initiate with a new seed

==2.9 Regular Expressions==

<div class="time-estimate">
Time estimated: 1 h; taken 110 min; date started: 2019-10-31; date completed: 2019-10-31

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 23:45, 31 October 2019 (EDT)
</div>

;Useful functions:
:* gsub(<pattern>, <sub>, <string>): substitute substrings in <string> that match <pattern> (regex) with <sub>
:* strsplit(<string>, <split>): '''the <split> supports regex pattern'''

;A special note about escaping special meanings in R:
<span style="color:red">Always use <code>"\\"</code> to properly escape</span>
 Reason: The regex parser in R somwhow when it sees "\", it expects "\n" or "\t" (as a single character) and not anything else.
 Therefore, an extra escape is needed to tell the parser to treat the second "\" as it is before interpreting regex (how awful..).

:* Can cat() the expression to see what the regex interpreter actually "sees"

;Escape character can also turn on metacharacters:
:* <code>\w</code>: word character (A-Z OR a-z OR 0-9 OR "_")
:* <code>\W</code>: NOT word character
:* <code>\s</code>: " " OR "\n" OR "\t"
:* <code>\S</code>: NOT space character
:* <code>\b</code>: word boundary?

;A useful punchline:
<code>"^\\s*#"</code> (all lines that are commented out)

<span style="color:red">'''The strsplit() example in the [http://steipe.biochemistry.utoronto.ca/abc/index.php/RPR-RegEx#strsplit.28.29 course unit] is problematic!'''</span>

The line <code>s <- "~`!@#$%^&*()_-=+[{]}\|;:',<.>/?"</code> should actually be:
<code>s <- "~`!@#$%^&*()_-=+[{]}\\|;:',<.>/?"</code>

Otherwise an error will occur saying it cannot understand "\|".

;Functions used to find regex matches:
:* regexpr(<pattern>, <string>): find one match
:* gregexpr(<pattern>, <string>): find all matches

The above two functions return a "match" object. It has attributes match.length and index.type
* match.length is a vector of indices where the match begins
* index.type is a vector of lengths of matches

:* regexec(<pattern>, <string>): in addition to do what regexpr() can do, if the <pattern> contains sub-expressions in parentheses, it will also return attributes of substring matching the pattern inside it [https://bookdown.org/rdpeng/rprogdatascience/regular-expressions.html].

;The matches can be retrieved via:
:* regmatches(<string>, <match>): <match> is an object returned by one of the above regex matching functions 

;Other libraries of R handling regex worth checking out: stringr, ore

===2.9.1 Practice of Regex in R with RPR-RegEx.R===
Line 66-67:
Fetch UniProt ID
<source lang="R">
patt <- "\\|(.*)\\|"
m <- regexec(patt, s)
(UniProtID <- regmatches(s, m)[[1]][2])
</source>

==2.8 Plotting==
;Plenty of examples [http://www.r-graph-gallery.com here].

;The power of visualization: https://www.reddit.com/r/dataisbeautiful/

===2.8.1 Helpful plotting related functions===
;summary(x)

;quantile(x, probs=<vector>): returns quantiles of the sample x. Specific quantile percentages can be specified in probs=<vector>.

;Sampling from a distribution: rnorm(), runif(), ...

;Built-in plotting functions:
:* plot(): scatter plot
:* rug(): add rugs onto the axes (visually show data distributions)
:* hist(): histogram
:* barplot(): bar graph
:* boxplot(): box-plot
:* stripchart(): (sort of like) 1D scatter plot

;For more: "plottingIntro.R" (B.Steipe)

;QQ-plot assessing normality assumption (by comparing the quantiles between theoretical and sample): qqnorm(), qqline()
:* If two samples are supplied as arguments, these functions also compare the two distributions.

===2.8.2 General principles===
;All plot elements are necessary (no unhelpful redundancy), informative presentation, all information in data displayed

;Plot tells a story: relationships, significance, and insufficiencies converyed by the data -> Not to mislead

==2.7 Functions==

<div class="time-estimate">
Time estimated: 1 h; taken 50 min; date started: 2019-10-07; date completed: 2019-10-07

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 21:38, 7 October 2019 (EDT)
</div>

;Basic syntax (assigning function to an object name<function_name>): <code><function_name> <- function(<arguments>) {<commands>}</code>
:* May have <code>return()</code> statement in <commands>

;An example of function: seq()
: Ways to pass arguments: <code>seq(-5,3)</code>, <code>seq(from=-2, to=2, by=1/3)</code>, <code>seq(length.out=30, to=100, from=1)</code>
: Named arguments don't assume default order when passing with explicit argument names.

;Read about a function's explicit code by typing it out and <enter>. 

;S3 methods?? (back to this later) <code>method(<function>); getAnywhere(<an_item_in_methods_of_the_function>)</code>

;Primitive (compiled in C)

;Good practice -- Functions should not have side effects

;Here is a countdown function (link on this page to the code):
<source lang="R">
countDown <- function(x=3) {
    txt <- ""
    start <- x
    position <- 1
    while (start >= 0) {
        if (start > 0) {
            txt[position] <- as.character(start)
        } else {
            txt[position] <- "Lift Off!"
        }
        start <- start - 1
        position <- position + 1
    }
    return(txt)
}
</source>

;The scope of a function is local.

;Here is a mylifeday calculator:
<source lang="R">
myLifeDays <- function(birthday, lday) {
    if (missing(birthday)) {
        print ("Enter your birthday as a string in \"YYYY-MM-DD\" format.")
        return()
    }
    bd <- strptime(birthday, "%Y-%m-%d") # convert string to time
    now <- format(Sys.time(), "%Y-%m-%d") # convert "now" to time
    diff <- round(as.numeric(difftime(now, bd, unit="days")))
    print(sprintf("This date was %d days ago.", diff))

    futureDay <- format(bd + as.difftime(lday, unit="days"), "%Y-%m-%d") #Consulted ?difftime
    print(sprintf("Celebrate your life day on: %s", futureDay))
    return()
}
</source>

==2.6 Control Structures==

<div class="time-estimate">
Time estimated: 1 h; taken ??? min; date started: 2019-10-07; date completed: 2019-10-07

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 20:31, 7 October 2019 (EDT)
</div>

===2.6.1 R Commands that may be helpful and used often===
;is.character(), is.factor(), is.integer(), is.sorted(), is.null(), is.numeric(), is.vector(): (self-explanatory)
<span style="color:red">Some behaviours I noticed to watch out for:</span>
<source lang="R">
is.integer(3) #FALSE
is.integer(3L) #TRUE
is.vector(3) #TRUE
</source>

;exists(<object>): returns TRUE if the <object> is defined.
:* <object> is a string of the name of variable to be questioned![https://stackoverflow.com/questions/28218508/r-check-if-r-object-exists-before-creating-it]

;Some string methods:
:* '''nchar(<string>)''': returns the number of characters in <string>
:* '''substr(<string>, start, end)''': slice string from <code>start</code> to <code>end</code> (inclusive). The slice can be re-assigned as a way to change <string>.
:* '''paste(..., sep=" ", collapse=NULL)''': concatenate strings in ... and separate them by sep string. '''If vector of strings argument is given, it will return vector of concat strings unless collapse is not NULL.
<source lang="R">
paste(c("a", "b"), c("c", "d"), sep="?", collapse="!") #gives one string: "a?c!b?d"
</source>

;Boolean operators <code>"&&"</code> and <code>"||"</code>:
:* <code>"&"</code> and <code>"|"</code> will give vectorized booleans, whereas <code>"&&"</code> and <code>"||"</code> give single booleans
:* <code>"&&"</code> will start out TRUE, and stop evaluating when the first FALSE is encountered.
:* <code>"||"</code> will start out FALSE, and stop evaluating when the first TRUE is encountered.

===2.6.2 If statements===
;Basic syntax: <code>if (<condition1>) {<command1>}; else if (<condition2>) {<command2>}; else {<command3>}</code>

;ifelse(<condition>, a, b): if <condition> is TRUE, evaluates a and returns a; else, evaluates b and returns b.
:* '''The <condition> can be vectorized, resulting in a vector of a's and b's'''

===2.6.3 For loops===
;Basic syntax: <code>for (<item> in <vector>); {<command>}</code>

;Some pointers:
:* Try to use vectorized operations instead of loops if possible.
:* '''seq_along(x)''': Try to always use this to prevent 1:0 type error...

===2.6.4 While loops===
;Basic syntax: <code>while (<condition>); {<command>}</code>

===2.6.5 Activities===
;A rocket ship has to sequence a countdown for the rocket to launch...
<source lang="R">
txt <- ""
count_down <- 3
position <- 1
while (count_down >= 0) {
    if (count_down > 0) {
        txt[position] <- as.character(count_down)
        #print(as.character(count_down))
    } else {
        txt[position] <- "Lift Off!"
    }
    count_down <- count_down - 1
    position <- position + 1
}

print(txt)
</source>

==2.5 Subsetting Project==

;Objective: Practise and get familiar with subsetting vector-like objects in R.

<div class="time-estimate">
Time estimated: 1 h; taken ??? min; date started: 2019-10-07; date completed: 2019-10-07

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 20:31, 7 October 2019 (EDT)
</div>

===2.5.1 R Commands that may be helpful and used often===
(aka tips I got from "subsettingPractice.R" by B. Steipe)

;sort(x): returns a vector that's x but sorted (from smallest to largest)

;order(x): returns the indices of the elements in x if sorted (useful in subsetting)

;apply(x, <margin>, <function>): apply <function> to all margins of vector-like x. e.g. <margin>=1 would be rows if x is a matrix.

;any(<boolean_vector>): returns TRUE if any of the element in <boolean_vector> is TRUE (<code>|</code> all elements)

;all(<boolean_vector>): returns TRUE if all of the element in <boolean_vector> is TRUE (<code>&</code> all elements)

;grep(<pattern>, x): (might end up being my favourite function) returns indices of elements in x that matches <pattern> '''(supports regex!)'''

;which(<boolean_vector>): returns a vector of indices at which <boolean_vector> is TRUE.

;unique(x): returns a vector of unique elements of x

;duplicated(x): returns a boolean vector. For all positions at which duplication occurs, the element is TRUE.

;<code>%in%</code>: operator &isin

;Can combine boolean vectors with boolean operators when subsetting


==2.4 Lists==

<div class="time-estimate">
Time estimated: 0.5 h; taken 45 min; date started: 2019-10-07; date completed: 2019-10-07

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 14:09, 7 October 2019 (EDT)
</div>

;Obviously list is much more versatile and flexible than vectors or data frames (any number of arbitrary types).

===2.4.1 R Commands that may be helpful and used often===
;list(): create a list
:* <name>=<item>: the list will be named this way with <item> having name <name>

;strsplit(<x>, <split>): split string <x> into a list through split markers <split>

;lapply(<x>, <function>): apply <function>(function) iteratively over the list/vector <x>

;unlist(<x>): flattens a list (simplifies <x> to a vector of its atomic components)

===2.4.2 Methods of lists===
;Access the list items:
:* by index (e.g. <code><nowiki>list[[1]]</nowiki></code>) <span style="color:red">'''Double brackets!'''</span>
:* if the list is named, access by name via $ (e.g. <code>list$firstItem</code>) or double brackets (e.g. <code><nowiki>list[[firstItem]]</nowiki></code>)

; Manipulate some lists of plasmid information:
<source lang="R">
#source("R_Exercise-BasicSetup.R")
#init()

pUC19 <- list(size=2686, marker="ampicillin", ori="ColE1", accession="L01397", BanI=c(235, 408, 550, 1647) ) #pUC19 info

(pACYC184 <- list(size=4245, marker=c("Tet", "Cam"), ori="p15A")) #Create a list like with data for pACYC184

plasmidDB <- list()
plasmidDB[["pUC19"]] <- pUC19 #Make a data bank list of plasmids and add pUC19 to it
plasmidDB[["pACYC184"]] <- pACYC184 #Add pACYC184 to it

pBR322 <- list(size=4361, marker=c("Amp", "Tet"), ori="ColE1") #Create a list like with data for pBR322
plasmidDB[["pBR322"]] <- pBR322 #Add pBR322 to it

plasmidDB$pACYC184 #Retrieve the entire pACYC184 list

sizes <- lapply(plasmidDB, function(x) { return(x$size) }) #Get sizes
min(unlist(sizes)) #This should give the smallest size
</source>


==2.3 Data Frames==

<div class="time-estimate">
Time estimated: 0.5 h; taken 20 min; date started: 2019-10-07; date completed: 2019-10-07

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 13:09, 7 October 2019 (EDT)
</div>

===2.3.1 R Commands that may be helpful and used often===
;read.table(<path>): load data set as data frame.
:* sep=<separation>(string): separations used in <path> data file. e.g. <code>"\t"</code> for tab in R.
:* header=<boolean>: indicate whether the data file contains variable names as its first line.
:* stringAsFactors=<boolean>: Usually turn this off unless I want to as.factor() all the strings.
   
;data.frame(...): create a data frame. ... in <column_name>=<values> format.
:* row.names=NULL: can specify row names here. The default is NULL.


===2.3.2 Methods for Data frames===
:* Renaming rows/Using a column as row names by assigning directly to its row names: <code>rownames(df) <- df[,1] #First column as row names</code>
:* Same rules for retrieving & removing rows/columns as matrices, with the added feature of retrieving by row/column names.
:* rbind() and cbind() should also work for data frames.


;Playing with plasmidData:
<source lang="R">
#source("R_Exercise-BasicSetup.R")
#init()

plasmidData <- read.table("plasmidData.tsv",
                          sep="\t",
                          header=TRUE,
                          stringsAsFactors = FALSE)

rownames(plasmidData) <- plasmidData[ , 1] #Make column 1 as the row names

#Added a new row
plasmidData <- rbind(plasmidData, data.frame(Name = "pMAL-p5x",
                                             Size = 5752,
                                             Marker = "Amp",
                                             Ori = "pMB1",
                                             Sites = "SacI, AvaI, ..., HindIII",
                                             stringsAsFactors = FALSE))

rownames(plasmidData) <- plasmidData[ , 1] #Repeat this line will fix the new row's name

#Alternatively: rownames(plasmidData)[4] <- plasmidData[4,1]
</source>


==2.2 Vector Objects==

<div class="time-estimate">
Time estimated: 1.5 h; taken 100 min; date started: 2019-10-06; date completed: 2019-10-07

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 00:37, 7 October 2019 (EDT)
</div>

===2.2.1 R Commands that may be helpful and used often===
;'''objectInfo(<object>): (specially defined function only in R_Exercise-BasicSetup.R): After init(), this function is defined and it returns mode(), typeof(), and class() of the <code><object></code>'''
;It also gives data structure of the object?

;seq(from, to, by): Generates a sequence

;summary(x): summary of x=<object> (e.g. If x is a vector, then it returns basic statistics on this vector such as mean, median etc.)


===2.2.2 Scalars ===
;single valued, but by construction, it's also a vector of length of 1
: e.g. length() and indexing will work

;Objects can have mode, type, and class.

;Important notes:
:* ;An (apparent) integer is by default a double-precision float! To get integer type and class, one has to have <code><integer>L</code>. An alternative is to coerce it into an integer.
:* ;However, integers obtained from range operators (e.g. <code>1:10</code>, which returns a vector) are actual integers!
:* <span style="color:red">'''R indexing starts at 1!!!'''</span>

;Coercion:
:* The names of functions are self-explanatory. Check with objectInfo() if needed: '''as.numeric(), as.character(), as.complex()'''
:* Note that as.numeric("pi") is silly and won't work -- It gives NA (<code>objectInfo(NA)</code> indicates <code>NA</code> is of mode logical, type logical, and class logical)
:* as.logical(x) will return FALSE if x == 0, elif it will return TRUE if x != 0 and x is numeric, else (e.g. if x is a string) will return NA.
:* <code>NaN</code> means "not a number", though it is of mode numeric, type double, and class numeric. '''<code>as.logical(NaN)</code> returns NA.'''
:* <code>NULL</code> means "nothing" or "undefined". It is of mode NULL, type NULL, and class NULL (basically just nothing). e.g. <code>as.logical(NULL)</code> will be the same as <code>as.logical()</code>
:* '''as.factor(x)''' encodes vector x as factor? (back to this later)
:* as.vector also can remove names from a vector (similar to unname())


===2.2.3 Vectors===
;An ordered array of objects of the same type

;A general way to generate a vector: c() (link to the function on this page?)

;Subsetting:
:* Indexing: e.g. x[1:10], x[5:1], x[seq(1,10,2)]
:* <span style="color:red">'''Negative indices deserves a special note for R'''</span>: the negative indices are the ones to be omitted.
:* Boolean filtering: e.g. x[x>3]
:* If <code>length(<logical_vector>) < length(<vector>)</code>, the <logical_vector> filter will be re-applied in cyclically on <vector>.
:* Indexing by name if it's a named array: e.g. <code>summary(x)[c("Max.", "Min.")]</code>
:* Retrieve names of a named vector using '''names(x)'''

;Extending:
:* Extending a vector by simply assign a value to a vector index larger than its length: e.g. <code>x[4] <- 4</code> works even if <code>length(x) < 4</code> before assignment.

;Many operations on vectors are by default vectorized! (just like NumPy)
:* Similar behaviour to cyclic boolean filtering, if the two vectors on which the operator acts on have different lengths... e.g. <code>(1:10)*(1:5)</code> is the same as <code>(1:10)/rep(1:5,2)</code>


===2.2.4 Matrices and Tensors?===
;Ways to make a matrix
1) To turn a 1-D vector into a matrix/tensor <array>, assign a vector of dimensions to dim(<array>) (e.g. <code>dim(a) <- c(x, y)</code>; the behaviour is similar to numpy.array.reshape() in Python)

2) Use '''matrix()''' or '''array()'''

3) Using '''rbind(...)''' (row bind) or '''cbind(...)''' (column bind)

;dim(a): dimensions of matrix a.
:* if <code>class(a) != "matrix"</code>, <code>dim(a)</code> will return <code>NULL</code>

;<code>nrow(a) == dim(a)[1]; ncol(a) == dim(a)[2]</code>, ... (slice follows at position 3 of dim(a) for a 3-D array)

; Note that unlike numpy.array subsetting, a comma must be given to the subset index of an R-array to retrieve an entire indexed row. For example:
<source lang="R">
a <- 1:12
dim(a) <- c(2,6)

a[1] #This should give 1, the first element
a[1,] #This should give the first row vector, 1:6

a[6] #Without comma, it takes the element at position 6 as if a is a linearized vector
</source>

==2.1 Basic Syntax==

<div class="time-estimate">
Time estimated: 0.5 h; taken 40 min; date started: 2019-10-05; date completed: 2019-10-06

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 18:46, 6 October 2019 (EDT)
</div>

===R Commands that may be helpful and used often===
;c(...): concatenates values into a vector (will coerce values into the same type)

;tail(<object>, ...): get the last part of <code><object></code>
:* n=<integer>: get the last <code><integer></code> of <code><object></code>
:* An analogous function: head()

;sample(x, size, replace=FALSE, prob=NULL): randomly sample from elements of <code>x</code>
:* if <code>x</code> is a single numeric >= 1, sample <code>1:x</code> ''(R syntax: <code>x:y</code> means x to y '''inclusive''')''
:* replace=<boolean>: with or without replacement?
:* prob=<vector>: a vector of probability weights


===R syntax practice===
<source lang="R">
numbers <- c(16, 20, 3, 5, 9)
lastnum <- tail(numbers, 1)

(lastnum < 6) | (lastnum > 10) #To check whether lastNum is less than 6 or greater than 10

(lastnum >= 10) & (lastnum < 20) #To check whether lastNum is in the interval [10, 20)

(((((lastnum / 7)*10 - (((lastnum / 7)*10) %/% 1)) / 10) * 100) %/% 1) ^ (1/3) #To output TRUE if the following operation gives 2

#COUNTER-INTUITIVE/STRANGE BEHAVIOUR!!! (lastnum / 7)*10 %/% 1 does not do what I expect it to do
#It does 10 %/% 1 first
#Weird that integer division, while is sort of division, takes priority?
</source>

<span style="color:red"><code>(lastnum / 7)*10 %/% 1</code> does not do what I expect it to do</span>

<span style="color:red">I have to do <code>((lastnum / 7)*10) %/% 1</code></span>

<span style="color:red">Weird that integer division, while is sort of division, takes priority?</span>


===Notes on Variables===
;Can make use of <code>make.names</code> to make syntactically valid variable names from character vectors. See <code>?make.names for more</code>.

;Reserved words for R-parser can be seen in <code>?reserved</code> (e.g. <code>TRUE <- 3</code> won't work)

;Do not re-assign <code>pi</code>!!! Unfortunately it doesn't throw an error.


===Syntax features===
;Just like python, arithmetics in R does not seem to be sensitive to (number of) spaces.

;Unlike python:
:* Booleans (TRUE or FALSE) are case sensitive (RStudio autocorrects)
:* Exponentiation: <code>^</code> (turns out <code>**</code> also works in R)
:* Mod: <code>%%</code>
:* Integer division: <code>%/%</code>
:* Does not support "and" or "or". Only <code>&</code> or <code>|</code>

{{Vspace}}
=1 Preparation for R=
==1.4 Getting Help with R==

<div class="time-estimate">
Time estimated: 0.5 h; taken 20 min; date started: 2019-10-06; date completed: 2019-10-06

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 11:26, 6 October 2019 (EDT)
</div>

===R Commands that may be helpful and used often===
;help(<item>): get help info for <code><item></code>, which can be function for syntax. If syntax is give as <code><item></code> argument, it should be a string.
:* synonymous to ?<item>

;apropos(<string>): show all functions that contains <code><string>(string)</code>
:* '''Supports regex for the string argument!'''
:* '''Not case sensitive!'''


===For asking further questions...===
;Minimum working example principle

;Required items for a reproducible example[http://adv-r.had.co.nz/Reproducibility.html]:
:* Required packages: should be loaded at the top of the script
:* Code
:* Data
::To include data, recreate the text representation of data by running <code>dput(<object>)</code>, copy the output, and assign it to <code><object></code> by pasting the text representation in the reproducible code (<code><object> <- <pasted_item></code>).
:* R-environment: run <code>sessionInfo()</code> and include its output as a comment in the reproducible code.
:* <code>set.seed()</code> for random processes (reproducible; pseudo-random...)

==1.3 R Scripting==
===R Commands that may be helpful and used often===
;source(<path>): execute the R-script <code><path>(string)</code>

==1.2 Configurations==

<div class="time-estimate">
Time estimated: 1 h; taken 70 min; date started: 2019-10-05; date completed: 2019-10-06

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 11:26, 6 October 2019 (EDT)
</div>


===R Commands that may be helpful and used often===
;getwd(): get current working directory

;setwd(<path>): set <code><path>(string)</code> as working directory

;list.files(): list files in working directory

;list.dirs(): list sub-directories in working directory

;ls(): list current workspace contents

;rm(<item>): remove an item <code><item></code> from the workspace
:* list=<code><list></code>: remove an array of items in <code><list></code>

;save(<item>): save <code><item></code> into a file
:* file=<code><path>(string)</code>: save the item as <code><path></code>
:* Recommended extension from the website: .RData

;load(<path>): load items saved in <code><path>(string)</code>


===R Workspace===
;Just don't bother restarting from saved workspace... Instead, save objects using <code>save()</code> and <code>load()</code>


===RStudio Project===
;Files created upon creating a project:
:* Project file <code>.Rproj</code>: this contains project options
:* Temporary files <code>.Rproj.user</code>: may be ignored by version control

;Pointers on project options:
:* Option to restore <code>.RData</code> at startup
:* Option to save <code>.RData</code> upon exit
:* Option to save command history at <code>.Rhistory</code> '''(Strongly Recommended)'''
:* Option to set <code><tab></code> as soft tab
:* Specify version control system (i.e. git)

;More info at [https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects this link]

==1.1 Installations==

<div class="time-estimate">
Time estimated: 1 h; taken 3 h; date started: 2019-10-05; date completed: 2019-10-05

[[User:Zhi Wei Zeng|Zhi Wei Zeng]] ([[User talk:Zhi Wei Zeng|talk]]) 20:33, 5 October 2019 (EDT)
</div>

===R Commands that may be helpful and used often===
;library():
:* When no arguments given: list of installed package
:* argument=<code><package></code>: load <code><package></code> (not string! no quotes!)
:* help=<code><package></code>: doc for <code><package></code>

;data():
:* When no arguments given, list of available data sets
:* argument=<code><dataset></code>: load dataset <code><dataset></code>
:* package=<code><package></code>: load/list dataset(s) in <code><package></code>

;search(): list of currently loaded packages

;vignette(): (also doc for a package?)

;Get help by preceding function, package, or library name with <code>?</code>

;Get help by preceding function, package, or library name with <code>??</code> if I have approximate impression for the name of it (e.g. <code>?aaindex</code> will not work but <code>??aaindex</code> will work)

;s2c():
:* argument=<code><string>(string)</code>: convert <string> into vector of constituent characters


===Install seqinr===
<source lang="R">
install.packages("seqinr")
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
'''''Installation messages'''''
<div class="mw-collapsible-content">
<code>
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Wilson/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
also installing the dependencies ‘ade4’, ‘segmented’

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/ade4_1.7-13.zip'
Content type 'application/zip' length 5224910 bytes (5.0 MB)
downloaded 5.0 MB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/segmented_1.0-0.zip'
Content type 'application/zip' length 479928 bytes (468 KB)
downloaded 468 KB

trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/seqinr_3.6-1.zip'
Content type 'application/zip' length 4162333 bytes (4.0 MB)
downloaded 4.0 MB

package ‘ade4’ successfully unpacked and MD5 sums checked
package ‘segmented’ successfully unpacked and MD5 sums checked
package ‘seqinr’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
C:\Users\Wilson\AppData\Local\Temp\RtmpOCLlIY\downloaded_packages
</code>
</div>
</div>


===Playing with dataset seqinr::aaindex===
;;Seems like we retieve entries of data in the dataset via some rather arbitrary name?

<source lang="R">
?seqinr::aaindex
#This can tell me the following line, which lets me know the index and the name of the data entry
#It also tells me what $H, $J etc. mean when I display a data entry (the third line)

which(sapply(aaindex, function(x) length(grep("Kyte", x$A)) != 0)) #grep() is probably regex filter

aaindex$FASG890101
</source>


===Plot sample data===
<source lang="R">
plot(aaindex$FASG890101$I,
     aaindex$PONJ960101$I,
     xlab="hydrophobicity", ylab="volume", type="n")
text(aaindex$FASG890101$I,
     aaindex$PONJ960101$I,
     labels=a(names(aaindex$FASG890101$I)))
</source>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
<span style="color:red">'''''Error message'''''</span>
<div class="mw-collapsible-content">
<code>Error in a(names(aaindex$FASG890101$I)) : could not find function "a"</code>

Also: there is nothing in the plot. I suspect it doesn't like a or aaindex
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
<span style="color:green">'''''Solution'''''</span>
<div class="mw-collapsible-content">
Explicitly define <code>seqinr::a</code> and rerun the script resolves the problem.

Turns out <code>aaindex</code> has no problem, as it has already been loaded.

If <code>library(seqinr)</code> was run ahead of time, the original code should work.
</div>
</div>


===Some useful "punchline" codes===
;Avoid error by installing a package if not already installed
<source lang="R">
if (! requireNamespace("seqinr", quietly=TRUE)) {
    install.packages("seqinr")
    }
#requireNamespace(): returns TRUE is installed and vice versa

if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
#Bioconductor packages are installed a bit differently

#Packages neither CRAN or Bioconductor: devtools (but the link on the course website is broken)
</source>

;sos package will help me find packages

{{Vspace}}
=0 Getting Started=
=='''''0.2 Plagiarism and Academic Integrity'''''==

===Objective===
: Avoid academic offense and abide courteous academic culture.

===Full Disclosure Policy===
* Anything idea that's not my own has a source that needs to be referenced.
* You can never have too many references.
* APA citation format
* The code should produce the exact results claimed. Otherwise: falsified results
* Reference by commenting in R-code

===Conclusion===

When in doubt, reference it or consult [http://steipe.biochemistry.utoronto.ca/abc/index.php/FND-Wiki_editing this page].

== 0.1 Project: Template for Journal ==

===Objective===
: goal of activity

<div class="time-estimate">
Time estimated: 0.75 h; taken 1 h; date started: 2019-10-03; date completed: 2019-10-03
</div>

===Progress===

;Activity 1
* Procedure: concise but sufficient so that it's reproducible
* Results: static data, variable data, analysis results

;Activity 2
* Cross-referencing with anchors
* Images: compressed; stereo views for images of molecules; should convey what I'm trying to show effectively
* Here's the R-code
<div class="toccolours mw-collapsible mw-collapsed" style="width:90%; margin-left: 10px; padding-right: 15px">
My R code below ...
<div class="mw-collapsible-content">
<source lang="R">
#R-code here
</source>

</div>
</div>


===Conclusion and outlook===

Interpretation of results.

Next step and link to the next step.

{{Vspace}}
----
----
=References=

<references />

{{Vspace}}

----

[[Category:BCH441-2019_Journal]]

----

{{CC-BY}}